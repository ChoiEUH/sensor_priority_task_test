
Sensor_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d84  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005f34  08005f34  00015f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006014  08006014  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800601c  0800601c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000416c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200041e0  200041e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d83  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bc2  00000000  00000000  00033e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  000369f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  00037c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025cd7  00000000  00000000  00038cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140b1  00000000  00000000  0005e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee689  00000000  00000000  00072a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00161109  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005084  00000000  00000000  0016115c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005f1c 	.word	0x08005f1c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08005f1c 	.word	0x08005f1c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295
 80008c0:	f000 b974 	b.w	8000bac <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008e0:	9d08      	ldr	r5, [sp, #32]
 80008e2:	4604      	mov	r4, r0
 80008e4:	468e      	mov	lr, r1
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d14d      	bne.n	8000986 <__udivmoddi4+0xaa>
 80008ea:	428a      	cmp	r2, r1
 80008ec:	4694      	mov	ip, r2
 80008ee:	d969      	bls.n	80009c4 <__udivmoddi4+0xe8>
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	b152      	cbz	r2, 800090c <__udivmoddi4+0x30>
 80008f6:	fa01 f302 	lsl.w	r3, r1, r2
 80008fa:	f1c2 0120 	rsb	r1, r2, #32
 80008fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000902:	fa0c fc02 	lsl.w	ip, ip, r2
 8000906:	ea41 0e03 	orr.w	lr, r1, r3
 800090a:	4094      	lsls	r4, r2
 800090c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000910:	0c21      	lsrs	r1, r4, #16
 8000912:	fbbe f6f8 	udiv	r6, lr, r8
 8000916:	fa1f f78c 	uxth.w	r7, ip
 800091a:	fb08 e316 	mls	r3, r8, r6, lr
 800091e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000922:	fb06 f107 	mul.w	r1, r6, r7
 8000926:	4299      	cmp	r1, r3
 8000928:	d90a      	bls.n	8000940 <__udivmoddi4+0x64>
 800092a:	eb1c 0303 	adds.w	r3, ip, r3
 800092e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000932:	f080 811f 	bcs.w	8000b74 <__udivmoddi4+0x298>
 8000936:	4299      	cmp	r1, r3
 8000938:	f240 811c 	bls.w	8000b74 <__udivmoddi4+0x298>
 800093c:	3e02      	subs	r6, #2
 800093e:	4463      	add	r3, ip
 8000940:	1a5b      	subs	r3, r3, r1
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb3 f0f8 	udiv	r0, r3, r8
 8000948:	fb08 3310 	mls	r3, r8, r0, r3
 800094c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000950:	fb00 f707 	mul.w	r7, r0, r7
 8000954:	42a7      	cmp	r7, r4
 8000956:	d90a      	bls.n	800096e <__udivmoddi4+0x92>
 8000958:	eb1c 0404 	adds.w	r4, ip, r4
 800095c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000960:	f080 810a 	bcs.w	8000b78 <__udivmoddi4+0x29c>
 8000964:	42a7      	cmp	r7, r4
 8000966:	f240 8107 	bls.w	8000b78 <__udivmoddi4+0x29c>
 800096a:	4464      	add	r4, ip
 800096c:	3802      	subs	r0, #2
 800096e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000972:	1be4      	subs	r4, r4, r7
 8000974:	2600      	movs	r6, #0
 8000976:	b11d      	cbz	r5, 8000980 <__udivmoddi4+0xa4>
 8000978:	40d4      	lsrs	r4, r2
 800097a:	2300      	movs	r3, #0
 800097c:	e9c5 4300 	strd	r4, r3, [r5]
 8000980:	4631      	mov	r1, r6
 8000982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000986:	428b      	cmp	r3, r1
 8000988:	d909      	bls.n	800099e <__udivmoddi4+0xc2>
 800098a:	2d00      	cmp	r5, #0
 800098c:	f000 80ef 	beq.w	8000b6e <__udivmoddi4+0x292>
 8000990:	2600      	movs	r6, #0
 8000992:	e9c5 0100 	strd	r0, r1, [r5]
 8000996:	4630      	mov	r0, r6
 8000998:	4631      	mov	r1, r6
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	fab3 f683 	clz	r6, r3
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	d14a      	bne.n	8000a3c <__udivmoddi4+0x160>
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d302      	bcc.n	80009b0 <__udivmoddi4+0xd4>
 80009aa:	4282      	cmp	r2, r0
 80009ac:	f200 80f9 	bhi.w	8000ba2 <__udivmoddi4+0x2c6>
 80009b0:	1a84      	subs	r4, r0, r2
 80009b2:	eb61 0303 	sbc.w	r3, r1, r3
 80009b6:	2001      	movs	r0, #1
 80009b8:	469e      	mov	lr, r3
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d0e0      	beq.n	8000980 <__udivmoddi4+0xa4>
 80009be:	e9c5 4e00 	strd	r4, lr, [r5]
 80009c2:	e7dd      	b.n	8000980 <__udivmoddi4+0xa4>
 80009c4:	b902      	cbnz	r2, 80009c8 <__udivmoddi4+0xec>
 80009c6:	deff      	udf	#255	; 0xff
 80009c8:	fab2 f282 	clz	r2, r2
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	f040 8092 	bne.w	8000af6 <__udivmoddi4+0x21a>
 80009d2:	eba1 010c 	sub.w	r1, r1, ip
 80009d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009da:	fa1f fe8c 	uxth.w	lr, ip
 80009de:	2601      	movs	r6, #1
 80009e0:	0c20      	lsrs	r0, r4, #16
 80009e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009e6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ee:	fb0e f003 	mul.w	r0, lr, r3
 80009f2:	4288      	cmp	r0, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x12c>
 80009f6:	eb1c 0101 	adds.w	r1, ip, r1
 80009fa:	f103 38ff 	add.w	r8, r3, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x12a>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f200 80cb 	bhi.w	8000b9c <__udivmoddi4+0x2c0>
 8000a06:	4643      	mov	r3, r8
 8000a08:	1a09      	subs	r1, r1, r0
 8000a0a:	b2a4      	uxth	r4, r4
 8000a0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a10:	fb07 1110 	mls	r1, r7, r0, r1
 8000a14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a18:	fb0e fe00 	mul.w	lr, lr, r0
 8000a1c:	45a6      	cmp	lr, r4
 8000a1e:	d908      	bls.n	8000a32 <__udivmoddi4+0x156>
 8000a20:	eb1c 0404 	adds.w	r4, ip, r4
 8000a24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a28:	d202      	bcs.n	8000a30 <__udivmoddi4+0x154>
 8000a2a:	45a6      	cmp	lr, r4
 8000a2c:	f200 80bb 	bhi.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a30:	4608      	mov	r0, r1
 8000a32:	eba4 040e 	sub.w	r4, r4, lr
 8000a36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a3a:	e79c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000a3c:	f1c6 0720 	rsb	r7, r6, #32
 8000a40:	40b3      	lsls	r3, r6
 8000a42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a52:	431c      	orrs	r4, r3
 8000a54:	40f9      	lsrs	r1, r7
 8000a56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a62:	0c20      	lsrs	r0, r4, #16
 8000a64:	fa1f fe8c 	uxth.w	lr, ip
 8000a68:	fb09 1118 	mls	r1, r9, r8, r1
 8000a6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a70:	fb08 f00e 	mul.w	r0, r8, lr
 8000a74:	4288      	cmp	r0, r1
 8000a76:	fa02 f206 	lsl.w	r2, r2, r6
 8000a7a:	d90b      	bls.n	8000a94 <__udivmoddi4+0x1b8>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a84:	f080 8088 	bcs.w	8000b98 <__udivmoddi4+0x2bc>
 8000a88:	4288      	cmp	r0, r1
 8000a8a:	f240 8085 	bls.w	8000b98 <__udivmoddi4+0x2bc>
 8000a8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a92:	4461      	add	r1, ip
 8000a94:	1a09      	subs	r1, r1, r0
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000aa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	458e      	cmp	lr, r1
 8000aaa:	d908      	bls.n	8000abe <__udivmoddi4+0x1e2>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ab4:	d26c      	bcs.n	8000b90 <__udivmoddi4+0x2b4>
 8000ab6:	458e      	cmp	lr, r1
 8000ab8:	d96a      	bls.n	8000b90 <__udivmoddi4+0x2b4>
 8000aba:	3802      	subs	r0, #2
 8000abc:	4461      	add	r1, ip
 8000abe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ac2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ac6:	eba1 010e 	sub.w	r1, r1, lr
 8000aca:	42a1      	cmp	r1, r4
 8000acc:	46c8      	mov	r8, r9
 8000ace:	46a6      	mov	lr, r4
 8000ad0:	d356      	bcc.n	8000b80 <__udivmoddi4+0x2a4>
 8000ad2:	d053      	beq.n	8000b7c <__udivmoddi4+0x2a0>
 8000ad4:	b15d      	cbz	r5, 8000aee <__udivmoddi4+0x212>
 8000ad6:	ebb3 0208 	subs.w	r2, r3, r8
 8000ada:	eb61 010e 	sbc.w	r1, r1, lr
 8000ade:	fa01 f707 	lsl.w	r7, r1, r7
 8000ae2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ae6:	40f1      	lsrs	r1, r6
 8000ae8:	431f      	orrs	r7, r3
 8000aea:	e9c5 7100 	strd	r7, r1, [r5]
 8000aee:	2600      	movs	r6, #0
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	40d8      	lsrs	r0, r3
 8000afc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b00:	fa21 f303 	lsr.w	r3, r1, r3
 8000b04:	4091      	lsls	r1, r2
 8000b06:	4301      	orrs	r1, r0
 8000b08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b14:	fb07 3610 	mls	r6, r7, r0, r3
 8000b18:	0c0b      	lsrs	r3, r1, #16
 8000b1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b22:	429e      	cmp	r6, r3
 8000b24:	fa04 f402 	lsl.w	r4, r4, r2
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x260>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b32:	d22f      	bcs.n	8000b94 <__udivmoddi4+0x2b8>
 8000b34:	429e      	cmp	r6, r3
 8000b36:	d92d      	bls.n	8000b94 <__udivmoddi4+0x2b8>
 8000b38:	3802      	subs	r0, #2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	1b9b      	subs	r3, r3, r6
 8000b3e:	b289      	uxth	r1, r1
 8000b40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b44:	fb07 3316 	mls	r3, r7, r6, r3
 8000b48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b50:	428b      	cmp	r3, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x28a>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b5c:	d216      	bcs.n	8000b8c <__udivmoddi4+0x2b0>
 8000b5e:	428b      	cmp	r3, r1
 8000b60:	d914      	bls.n	8000b8c <__udivmoddi4+0x2b0>
 8000b62:	3e02      	subs	r6, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b6c:	e738      	b.n	80009e0 <__udivmoddi4+0x104>
 8000b6e:	462e      	mov	r6, r5
 8000b70:	4628      	mov	r0, r5
 8000b72:	e705      	b.n	8000980 <__udivmoddi4+0xa4>
 8000b74:	4606      	mov	r6, r0
 8000b76:	e6e3      	b.n	8000940 <__udivmoddi4+0x64>
 8000b78:	4618      	mov	r0, r3
 8000b7a:	e6f8      	b.n	800096e <__udivmoddi4+0x92>
 8000b7c:	454b      	cmp	r3, r9
 8000b7e:	d2a9      	bcs.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b80:	ebb9 0802 	subs.w	r8, r9, r2
 8000b84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b88:	3801      	subs	r0, #1
 8000b8a:	e7a3      	b.n	8000ad4 <__udivmoddi4+0x1f8>
 8000b8c:	4646      	mov	r6, r8
 8000b8e:	e7ea      	b.n	8000b66 <__udivmoddi4+0x28a>
 8000b90:	4620      	mov	r0, r4
 8000b92:	e794      	b.n	8000abe <__udivmoddi4+0x1e2>
 8000b94:	4640      	mov	r0, r8
 8000b96:	e7d1      	b.n	8000b3c <__udivmoddi4+0x260>
 8000b98:	46d0      	mov	r8, sl
 8000b9a:	e77b      	b.n	8000a94 <__udivmoddi4+0x1b8>
 8000b9c:	3b02      	subs	r3, #2
 8000b9e:	4461      	add	r1, ip
 8000ba0:	e732      	b.n	8000a08 <__udivmoddi4+0x12c>
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	e709      	b.n	80009ba <__udivmoddi4+0xde>
 8000ba6:	4464      	add	r4, ip
 8000ba8:	3802      	subs	r0, #2
 8000baa:	e742      	b.n	8000a32 <__udivmoddi4+0x156>

08000bac <__aeabi_idiv0>:
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4a07      	ldr	r2, [pc, #28]	; (8000bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8000bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <vApplicationGetIdleTaskMemory+0x30>)
 8000bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2280      	movs	r2, #128	; 0x80
 8000bcc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000090 	.word	0x20000090
 8000be0:	200000e4 	.word	0x200000e4

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b096      	sub	sp, #88	; 0x58
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fd2d 	bl	8001648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f851 	bl	8000c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f000 f9e1 	bl	8000fb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bf6:	f000 f9b5 	bl	8000f64 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000bfa:	f000 f8b5 	bl	8000d68 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000bfe:	f000 f957 	bl	8000eb0 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000c02:	f000 f903 	bl	8000e0c <MX_ADC3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <main+0x98>)
 8000c08:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000c0c:	461d      	mov	r5, r3
 8000c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f003 fa8c 	bl	800413e <osThreadCreate>
 8000c26:	4603      	mov	r3, r0
 8000c28:	4a15      	ldr	r2, [pc, #84]	; (8000c80 <main+0x9c>)
 8000c2a:	6013      	str	r3, [r2, #0]

  /* definition and creation of thermistorTask0 */
  osThreadDef(thermistorTask0, ThermistorTask02, osPriorityLow, 0, 128);
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <main+0xa0>)
 8000c2e:	f107 0420 	add.w	r4, r7, #32
 8000c32:	461d      	mov	r5, r3
 8000c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  thermistorTask0Handle = osThreadCreate(osThread(thermistorTask0), NULL);
 8000c40:	f107 0320 	add.w	r3, r7, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fa79 	bl	800413e <osThreadCreate>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <main+0xa4>)
 8000c50:	6013      	str	r3, [r2, #0]

  /* definition and creation of gasTask03 */
  osThreadDef(gasTask03, GasTask03, osPriorityHigh, 0, 128);
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <main+0xa8>)
 8000c54:	1d3c      	adds	r4, r7, #4
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gasTask03Handle = osThreadCreate(osThread(gasTask03), NULL);
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f003 fa68 	bl	800413e <osThreadCreate>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <main+0xac>)
 8000c72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000c74:	f003 fa5c 	bl	8004130 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <main+0x94>
 8000c7a:	bf00      	nop
 8000c7c:	08005f5c 	.word	0x08005f5c
 8000c80:	20000468 	.word	0x20000468
 8000c84:	08005f78 	.word	0x08005f78
 8000c88:	2000046c 	.word	0x2000046c
 8000c8c:	08005f94 	.word	0x08005f94
 8000c90:	20000470 	.word	0x20000470

08000c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b094      	sub	sp, #80	; 0x50
 8000c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2230      	movs	r2, #48	; 0x30
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f004 fcd2 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc8:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <SystemClock_Config+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a21      	ldr	r2, [pc, #132]	; (8000d64 <SystemClock_Config+0xd0>)
 8000cde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce2:	6013      	str	r3, [r2, #0]
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	; (8000d64 <SystemClock_Config+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d04:	2304      	movs	r3, #4
 8000d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d08:	23a8      	movs	r3, #168	; 0xa8
 8000d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d10:	2307      	movs	r3, #7
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 fc6b 	bl	80025f4 <HAL_RCC_OscConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d24:	f000 fa80 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d28:	230f      	movs	r3, #15
 8000d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2105      	movs	r1, #5
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 fecc 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d52:	f000 fa69 	bl	8001228 <Error_Handler>
  }
}
 8000d56:	bf00      	nop
 8000d58:	3750      	adds	r7, #80	; 0x50
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_ADC1_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dca:	f000 fcaf 	bl	800172c <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f000 fa28 	bl	8001228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dea:	f000 fef3 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f000 fa18 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000034c 	.word	0x2000034c
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_ADC3_Init+0x9c>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <MX_ADC3_Init+0xa0>)
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e6e:	f000 fc5d 	bl	800172c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e78:	f000 f9d6 	bl	8001228 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e8e:	f000 fea1 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e98:	f000 f9c6 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000394 	.word	0x20000394
 8000ea8:	40012200 	.word	0x40012200
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ed2:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000ed4:	4a22      	ldr	r2, [pc, #136]	; (8000f60 <MX_TIM4_Init+0xb0>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1680-1;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000eda:	f240 628f 	movw	r2, #1679	; 0x68f
 8000ede:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000ee8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eee:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000efa:	4818      	ldr	r0, [pc, #96]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000efc:	f002 f812 	bl	8002f24 <HAL_TIM_PWM_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f06:	f000 f98f 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4619      	mov	r1, r3
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000f1a:	f002 fc9f 	bl	800385c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f24:	f000 f980 	bl	8001228 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4807      	ldr	r0, [pc, #28]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000f40:	f002 f948 	bl	80031d4 <HAL_TIM_PWM_ConfigChannel>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f4a:	f000 f96d 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f4e:	4803      	ldr	r0, [pc, #12]	; (8000f5c <MX_TIM4_Init+0xac>)
 8000f50:	f000 fa4a 	bl	80013e8 <HAL_TIM_MspPostInit>

}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200003dc 	.word	0x200003dc
 8000f60:	40000800 	.word	0x40000800

08000f64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART3_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_USART3_UART_Init+0x4c>)
 8000f9c:	f002 fcee 	bl	800397c <HAL_UART_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fa6:	f000 f93f 	bl	8001228 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000424 	.word	0x20000424
 8000fb4:	40004800 	.word	0x40004800

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08c      	sub	sp, #48	; 0x30
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4b      	ldr	r2, [pc, #300]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	4b45      	ldr	r3, [pc, #276]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a44      	ldr	r2, [pc, #272]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b42      	ldr	r3, [pc, #264]	; (8001104 <MX_GPIO_Init+0x14c>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	4b3e      	ldr	r3, [pc, #248]	; (8001104 <MX_GPIO_Init+0x14c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a3d      	ldr	r2, [pc, #244]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a36      	ldr	r2, [pc, #216]	; (8001104 <MX_GPIO_Init+0x14c>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b30      	ldr	r3, [pc, #192]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a28      	ldr	r2, [pc, #160]	; (8001104 <MX_GPIO_Init+0x14c>)
 8001064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_GPIO_Init+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f244 0181 	movw	r1, #16513	; 0x4081
 800107c:	4822      	ldr	r0, [pc, #136]	; (8001108 <MX_GPIO_Init+0x150>)
 800107e:	f001 fa9f 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	2140      	movs	r1, #64	; 0x40
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_GPIO_Init+0x154>)
 8001088:	f001 fa9a 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800108c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4619      	mov	r1, r3
 80010a2:	481b      	ldr	r0, [pc, #108]	; (8001110 <MX_GPIO_Init+0x158>)
 80010a4:	f001 f8e0 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80010a8:	f244 0381 	movw	r3, #16513	; 0x4081
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	2301      	movs	r3, #1
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	4619      	mov	r1, r3
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <MX_GPIO_Init+0x150>)
 80010c2:	f001 f8d1 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	; (800110c <MX_GPIO_Init+0x154>)
 80010de:	f001 f8c3 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <MX_GPIO_Init+0x154>)
 80010f6:	f001 f8b7 	bl	8002268 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3730      	adds	r7, #48	; 0x30
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400
 800110c:	40021800 	.word	0x40021800
 8001110:	40020800 	.word	0x40020800

08001114 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f003 f85a 	bl	80041d6 <osDelay>
 8001122:	e7fb      	b.n	800111c <StartDefaultTask+0x8>
 8001124:	0000      	movs	r0, r0
	...

08001128 <ThermistorTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ThermistorTask02 */
void ThermistorTask02(void const * argument)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ThermistorTask02 */
	 memset(uart,0,sizeof(uart));
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	2100      	movs	r1, #0
 8001134:	4816      	ldr	r0, [pc, #88]	; (8001190 <ThermistorTask02+0x68>)
 8001136:	f004 fa89 	bl	800564c <memset>

  /* Infinite loop */
  for(;;)
  {
	  int value = thermistor*0.029;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <ThermistorTask02+0x6c>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fb22 	bl	8000788 <__aeabi_i2d>
 8001144:	a310      	add	r3, pc, #64	; (adr r3, 8001188 <ThermistorTask02+0x60>)
 8001146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114a:	f7ff f8a1 	bl	8000290 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4610      	mov	r0, r2
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fb81 	bl	800085c <__aeabi_d2iz>
 800115a:	4603      	mov	r3, r0
 800115c:	60fb      	str	r3, [r7, #12]
      //thermistor temperature = resolution * 0.029//
	  HAL_ADC_Start_IT(&hadc1);
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <ThermistorTask02+0x70>)
 8001160:	f000 fb28 	bl	80017b4 <HAL_ADC_Start_IT>

	  sprintf(uart,"%d°C\r\n",value);
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	490d      	ldr	r1, [pc, #52]	; (800119c <ThermistorTask02+0x74>)
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <ThermistorTask02+0x68>)
 800116a:	f004 fa77 	bl	800565c <siprintf>
	  HAL_UART_Transmit(&huart3,uart,sizeof(uart),0xFFFF);
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	2264      	movs	r2, #100	; 0x64
 8001174:	4906      	ldr	r1, [pc, #24]	; (8001190 <ThermistorTask02+0x68>)
 8001176:	480a      	ldr	r0, [pc, #40]	; (80011a0 <ThermistorTask02+0x78>)
 8001178:	f002 fc4d 	bl	8003a16 <HAL_UART_Transmit>
    osDelay(1000);
 800117c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001180:	f003 f829 	bl	80041d6 <osDelay>
  {
 8001184:	e7d9      	b.n	800113a <ThermistorTask02+0x12>
 8001186:	bf00      	nop
 8001188:	0e560419 	.word	0x0e560419
 800118c:	3f9db22d 	.word	0x3f9db22d
 8001190:	200002e4 	.word	0x200002e4
 8001194:	20000348 	.word	0x20000348
 8001198:	2000034c 	.word	0x2000034c
 800119c:	08005fb0 	.word	0x08005fb0
 80011a0:	20000424 	.word	0x20000424

080011a4 <GasTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GasTask03 */
void GasTask03(void const * argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GasTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_IT(&hadc3);
 80011ac:	480a      	ldr	r0, [pc, #40]	; (80011d8 <GasTask03+0x34>)
 80011ae:	f000 fb01 	bl	80017b4 <HAL_ADC_Start_IT>

	 	  sprintf(uart,"%d\r\n",gas);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <GasTask03+0x38>)
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4909      	ldr	r1, [pc, #36]	; (80011e0 <GasTask03+0x3c>)
 80011ba:	480a      	ldr	r0, [pc, #40]	; (80011e4 <GasTask03+0x40>)
 80011bc:	f004 fa4e 	bl	800565c <siprintf>
	 	  HAL_UART_Transmit(&huart3,uart,sizeof(uart),0xFFFF);
 80011c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c4:	2264      	movs	r2, #100	; 0x64
 80011c6:	4907      	ldr	r1, [pc, #28]	; (80011e4 <GasTask03+0x40>)
 80011c8:	4807      	ldr	r0, [pc, #28]	; (80011e8 <GasTask03+0x44>)
 80011ca:	f002 fc24 	bl	8003a16 <HAL_UART_Transmit>
	     osDelay(1000);
 80011ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d2:	f003 f800 	bl	80041d6 <osDelay>
  {
 80011d6:	e7e9      	b.n	80011ac <GasTask03+0x8>
 80011d8:	20000394 	.word	0x20000394
 80011dc:	2000034a 	.word	0x2000034a
 80011e0:	08005fb8 	.word	0x08005fb8
 80011e4:	200002e4 	.word	0x200002e4
 80011e8:	20000424 	.word	0x20000424

080011ec <HAL_ADC_ConvCpltCallback>:
  }
  /* USER CODE END GasTask03 */
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    thermistor = HAL_ADC_GetValue(&hadc1);
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <HAL_ADC_ConvCpltCallback+0x2c>)
 80011f6:	f000 fccb 	bl	8001b90 <HAL_ADC_GetValue>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_ADC_ConvCpltCallback+0x30>)
 8001200:	801a      	strh	r2, [r3, #0]
    gas = HAL_ADC_GetValue(&hadc3);
 8001202:	4807      	ldr	r0, [pc, #28]	; (8001220 <HAL_ADC_ConvCpltCallback+0x34>)
 8001204:	f000 fcc4 	bl	8001b90 <HAL_ADC_GetValue>
 8001208:	4603      	mov	r3, r0
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_ADC_ConvCpltCallback+0x38>)
 800120e:	801a      	strh	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2000034c 	.word	0x2000034c
 800121c:	20000348 	.word	0x20000348
 8001220:	20000394 	.word	0x20000394
 8001224:	2000034a 	.word	0x2000034a

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	e7fe      	b.n	8001230 <Error_Handler+0x8>
	...

08001234 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_MspInit+0x54>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_MspInit+0x54>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x54>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	603b      	str	r3, [r7, #0]
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_MspInit+0x54>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <HAL_MspInit+0x54>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	6413      	str	r3, [r2, #64]	; 0x40
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_MspInit+0x54>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	210f      	movs	r1, #15
 8001276:	f06f 0001 	mvn.w	r0, #1
 800127a:	f000 ffbe 	bl	80021fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a36      	ldr	r2, [pc, #216]	; (8001384 <HAL_ADC_MspInit+0xf8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d130      	bne.n	8001310 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012bc:	6453      	str	r3, [r2, #68]	; 0x44
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e6:	2308      	movs	r3, #8
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	4824      	ldr	r0, [pc, #144]	; (800138c <HAL_ADC_MspInit+0x100>)
 80012fa:	f000 ffb5 	bl	8002268 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2105      	movs	r1, #5
 8001302:	2012      	movs	r0, #18
 8001304:	f000 ff79 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001308:	2012      	movs	r0, #18
 800130a:	f000 ff92 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800130e:	e034      	b.n	800137a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC3)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1e      	ldr	r2, [pc, #120]	; (8001390 <HAL_ADC_MspInit+0x104>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12f      	bne.n	800137a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_ADC_MspInit+0xfc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001352:	2301      	movs	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <HAL_ADC_MspInit+0x108>)
 8001366:	f000 ff7f 	bl	8002268 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2105      	movs	r1, #5
 800136e:	2012      	movs	r0, #18
 8001370:	f000 ff43 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001374:	2012      	movs	r0, #18
 8001376:	f000 ff5c 	bl	8002232 <HAL_NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3730      	adds	r7, #48	; 0x30
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40012000 	.word	0x40012000
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000
 8001390:	40012200 	.word	0x40012200
 8001394:	40020800 	.word	0x40020800

08001398 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_TIM_PWM_MspInit+0x48>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d115      	bne.n	80013d6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2105      	movs	r1, #5
 80013ca:	201e      	movs	r0, #30
 80013cc:	f000 ff15 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013d0:	201e      	movs	r0, #30
 80013d2:	f000 ff2e 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40000800 	.word	0x40000800
 80013e4:	40023800 	.word	0x40023800

080013e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 030c 	add.w	r3, r7, #12
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a12      	ldr	r2, [pc, #72]	; (8001450 <HAL_TIM_MspPostInit+0x68>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d11e      	bne.n	8001448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_TIM_MspPostInit+0x6c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800142a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4619      	mov	r1, r3
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_TIM_MspPostInit+0x70>)
 8001444:	f000 ff10 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40000800 	.word	0x40000800
 8001454:	40023800 	.word	0x40023800
 8001458:	40020c00 	.word	0x40020c00

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <HAL_UART_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12c      	bne.n	80014d8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_UART_MspInit+0x88>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <HAL_UART_MspInit+0x88>)
 8001488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_UART_MspInit+0x88>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	; (80014e4 <HAL_UART_MspInit+0x88>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_UART_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014c8:	2307      	movs	r3, #7
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <HAL_UART_MspInit+0x8c>)
 80014d4:	f000 fec8 	bl	8002268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	; 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40004800 	.word	0x40004800
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020c00 	.word	0x40020c00

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <NMI_Handler+0x4>

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f8e6 	bl	80016ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001520:	f003 fbdc 	bl	8004cdc <xTaskGetSchedulerState>
 8001524:	4603      	mov	r3, r0
 8001526:	2b01      	cmp	r3, #1
 8001528:	d001      	beq.n	800152e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800152a:	f003 fe1d 	bl	8005168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001538:	4803      	ldr	r0, [pc, #12]	; (8001548 <ADC_IRQHandler+0x14>)
 800153a:	f000 fa19 	bl	8001970 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800153e:	4803      	ldr	r0, [pc, #12]	; (800154c <ADC_IRQHandler+0x18>)
 8001540:	f000 fa16 	bl	8001970 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000034c 	.word	0x2000034c
 800154c:	20000394 	.word	0x20000394

08001550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <TIM4_IRQHandler+0x10>)
 8001556:	f001 fd34 	bl	8002fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200003dc 	.word	0x200003dc

08001564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <_sbrk+0x5c>)
 800156e:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <_sbrk+0x60>)
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <_sbrk+0x64>)
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <_sbrk+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	429a      	cmp	r2, r3
 8001592:	d207      	bcs.n	80015a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001594:	f004 f822 	bl	80055dc <__errno>
 8001598:	4603      	mov	r3, r0
 800159a:	220c      	movs	r2, #12
 800159c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	e009      	b.n	80015b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015aa:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <_sbrk+0x64>)
 80015b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015b6:	68fb      	ldr	r3, [r7, #12]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20030000 	.word	0x20030000
 80015c4:	00000400 	.word	0x00000400
 80015c8:	20000474 	.word	0x20000474
 80015cc:	200041e0 	.word	0x200041e0

080015d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800162c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fa:	490e      	ldr	r1, [pc, #56]	; (8001634 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001600:	e002      	b.n	8001608 <LoopCopyDataInit>

08001602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001606:	3304      	adds	r3, #4

08001608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800160c:	d3f9      	bcc.n	8001602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800160e:	4a0b      	ldr	r2, [pc, #44]	; (800163c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001610:	4c0b      	ldr	r4, [pc, #44]	; (8001640 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001614:	e001      	b.n	800161a <LoopFillZerobss>

08001616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001618:	3204      	adds	r2, #4

0800161a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800161c:	d3fb      	bcc.n	8001616 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800161e:	f7ff ffd7 	bl	80015d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001622:	f003 ffe1 	bl	80055e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001626:	f7ff fadd 	bl	8000be4 <main>
  bx  lr    
 800162a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800162c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001638:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 800163c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001640:	200041e0 	.word	0x200041e0

08001644 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <CAN1_RX0_IRQHandler>
	...

08001648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800164c:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_Init+0x40>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0d      	ldr	r2, [pc, #52]	; (8001688 <HAL_Init+0x40>)
 8001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0a      	ldr	r2, [pc, #40]	; (8001688 <HAL_Init+0x40>)
 800165e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x40>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 fdb7 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f000 f808 	bl	800168c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fdda 	bl	8001234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x54>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x58>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fdcf 	bl	800224e <HAL_SYSTICK_Config>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00e      	b.n	80016d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d80a      	bhi.n	80016d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 fd97 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016cc:	4a06      	ldr	r2, [pc, #24]	; (80016e8 <HAL_InitTick+0x5c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
 80016d4:	e000      	b.n	80016d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20000004 	.word	0x20000004

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008
 8001710:	20000478 	.word	0x20000478

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000478 	.word	0x20000478

0800172c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e033      	b.n	80017aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	2b00      	cmp	r3, #0
 8001748:	d109      	bne.n	800175e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fd9e 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001772:	f023 0302 	bic.w	r3, r3, #2
 8001776:	f043 0202 	orr.w	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fb5a 	bl	8001e38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f023 0303 	bic.w	r3, r3, #3
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
 800179a:	e001      	b.n	80017a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_ADC_Start_IT+0x1a>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0bd      	b.n	800194a <HAL_ADC_Start_IT+0x196>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d018      	beq.n	8001816 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 0201 	orr.w	r2, r2, #1
 80017f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017f4:	4b58      	ldr	r3, [pc, #352]	; (8001958 <HAL_ADC_Start_IT+0x1a4>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a58      	ldr	r2, [pc, #352]	; (800195c <HAL_ADC_Start_IT+0x1a8>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9a      	lsrs	r2, r3, #18
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001808:	e002      	b.n	8001810 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	3b01      	subs	r3, #1
 800180e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f9      	bne.n	800180a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b01      	cmp	r3, #1
 8001822:	f040 8085 	bne.w	8001930 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001850:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	d106      	bne.n	8001874 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f023 0206 	bic.w	r2, r3, #6
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	645a      	str	r2, [r3, #68]	; 0x44
 8001872:	e002      	b.n	800187a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001882:	4b37      	ldr	r3, [pc, #220]	; (8001960 <HAL_ADC_Start_IT+0x1ac>)
 8001884:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800188e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800189e:	f043 0320 	orr.w	r3, r3, #32
 80018a2:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d12a      	bne.n	8001906 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_ADC_Start_IT+0x1b0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d015      	beq.n	80018e6 <HAL_ADC_Start_IT+0x132>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_ADC_Start_IT+0x1b4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d105      	bne.n	80018d0 <HAL_ADC_Start_IT+0x11c>
 80018c4:	4b26      	ldr	r3, [pc, #152]	; (8001960 <HAL_ADC_Start_IT+0x1ac>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a25      	ldr	r2, [pc, #148]	; (800196c <HAL_ADC_Start_IT+0x1b8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d136      	bne.n	8001948 <HAL_ADC_Start_IT+0x194>
 80018da:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_ADC_Start_IT+0x1ac>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d130      	bne.n	8001948 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d129      	bne.n	8001948 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	e020      	b.n	8001948 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <HAL_ADC_Start_IT+0x1b0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d11b      	bne.n	8001948 <HAL_ADC_Start_IT+0x194>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d114      	bne.n	8001948 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	e00b      	b.n	8001948 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f043 0210 	orr.w	r2, r3, #16
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f043 0201 	orr.w	r2, r3, #1
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000
 800195c:	431bde83 	.word	0x431bde83
 8001960:	40012300 	.word	0x40012300
 8001964:	40012000 	.word	0x40012000
 8001968:	40012100 	.word	0x40012100
 800196c:	40012200 	.word	0x40012200

08001970 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d049      	beq.n	8001a3a <HAL_ADC_IRQHandler+0xca>
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d046      	beq.n	8001a3a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12b      	bne.n	8001a2a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d127      	bne.n	8001a2a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 0220 	bic.w	r2, r2, #32
 8001a04:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d105      	bne.n	8001a2a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fbde 	bl	80011ec <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0212 	mvn.w	r2, #18
 8001a38:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a48:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d057      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x190>
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d054      	beq.n	8001b00 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d139      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a82:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d12b      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d124      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d11d      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d119      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fa9d 	bl	8002030 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f06f 020c 	mvn.w	r2, #12
 8001afe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b0e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d017      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x1d6>
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d10d      	bne.n	8001b46 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f837 	bl	8001baa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0201 	mvn.w	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b54:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d015      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x218>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f043 0202 	orr.w	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f06f 0220 	mvn.w	r2, #32
 8001b76:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f820 	bl	8001bbe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f06f 0220 	mvn.w	r2, #32
 8001b86:	601a      	str	r2, [r3, #0]
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e113      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x244>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d925      	bls.n	8001c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	3b1e      	subs	r3, #30
 8001c16:	2207      	movs	r2, #7
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68d9      	ldr	r1, [r3, #12]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4403      	add	r3, r0
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	e022      	b.n	8001c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	2207      	movs	r2, #7
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4403      	add	r3, r0
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d824      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b05      	subs	r3, #5
 8001cac:	221f      	movs	r2, #31
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b05      	subs	r3, #5
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce2:	e04c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d824      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b23      	subs	r3, #35	; 0x23
 8001cfe:	221f      	movs	r2, #31
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b23      	subs	r3, #35	; 0x23
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
 8001d34:	e023      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b41      	subs	r3, #65	; 0x41
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b41      	subs	r3, #65	; 0x41
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_ADC_ConfigChannel+0x250>)
 8001d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_ADC_ConfigChannel+0x254>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d10f      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d8>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d10b      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_ADC_ConfigChannel+0x254>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d12b      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x23a>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_ADC_ConfigChannel+0x258>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_ADC_ConfigChannel+0x1f4>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b11      	cmp	r3, #17
 8001dc6:	d122      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_ADC_ConfigChannel+0x258>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_ADC_ConfigChannel+0x25c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <HAL_ADC_ConfigChannel+0x260>)
 8001df0:	fba2 2303 	umull	r2, r3, r2, r3
 8001df4:	0c9a      	lsrs	r2, r3, #18
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e00:	e002      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	3b01      	subs	r3, #1
 8001e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f9      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	40012300 	.word	0x40012300
 8001e28:	40012000 	.word	0x40012000
 8001e2c:	10000012 	.word	0x10000012
 8001e30:	20000000 	.word	0x20000000
 8001e34:	431bde83 	.word	0x431bde83

08001e38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e40:	4b79      	ldr	r3, [pc, #484]	; (8002028 <ADC_Init+0x1f0>)
 8001e42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	021a      	lsls	r2, r3, #8
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	4a58      	ldr	r2, [pc, #352]	; (800202c <ADC_Init+0x1f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d022      	beq.n	8001f16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ede:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6899      	ldr	r1, [r3, #8]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	e00f      	b.n	8001f36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0202 	bic.w	r2, r2, #2
 8001f44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6899      	ldr	r1, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e1b      	ldrb	r3, [r3, #24]
 8001f50:	005a      	lsls	r2, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d01b      	beq.n	8001f9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6859      	ldr	r1, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	035a      	lsls	r2, r3, #13
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	e007      	b.n	8001fac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001faa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	051a      	lsls	r2, r3, #20
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6899      	ldr	r1, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fee:	025a      	lsls	r2, r3, #9
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	029a      	lsls	r2, r3, #10
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	430a      	orrs	r2, r1
 800201a:	609a      	str	r2, [r3, #8]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40012300 	.word	0x40012300
 800202c:	0f000001 	.word	0x0f000001

08002030 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff29 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff3e 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff31 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e177      	b.n	8002574 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8166 	bne.w	800256e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80c0 	beq.w	800256e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b66      	ldr	r3, [pc, #408]	; (800258c <HAL_GPIO_Init+0x324>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a65      	ldr	r2, [pc, #404]	; (800258c <HAL_GPIO_Init+0x324>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b63      	ldr	r3, [pc, #396]	; (800258c <HAL_GPIO_Init+0x324>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a61      	ldr	r2, [pc, #388]	; (8002590 <HAL_GPIO_Init+0x328>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a58      	ldr	r2, [pc, #352]	; (8002594 <HAL_GPIO_Init+0x32c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d037      	beq.n	80024a6 <HAL_GPIO_Init+0x23e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a57      	ldr	r2, [pc, #348]	; (8002598 <HAL_GPIO_Init+0x330>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_GPIO_Init+0x23a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_GPIO_Init+0x334>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d02b      	beq.n	800249e <HAL_GPIO_Init+0x236>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <HAL_GPIO_Init+0x338>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d025      	beq.n	800249a <HAL_GPIO_Init+0x232>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a54      	ldr	r2, [pc, #336]	; (80025a4 <HAL_GPIO_Init+0x33c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d01f      	beq.n	8002496 <HAL_GPIO_Init+0x22e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a53      	ldr	r2, [pc, #332]	; (80025a8 <HAL_GPIO_Init+0x340>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d019      	beq.n	8002492 <HAL_GPIO_Init+0x22a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a52      	ldr	r2, [pc, #328]	; (80025ac <HAL_GPIO_Init+0x344>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_GPIO_Init+0x226>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_GPIO_Init+0x348>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00d      	beq.n	800248a <HAL_GPIO_Init+0x222>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a50      	ldr	r2, [pc, #320]	; (80025b4 <HAL_GPIO_Init+0x34c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d007      	beq.n	8002486 <HAL_GPIO_Init+0x21e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	; (80025b8 <HAL_GPIO_Init+0x350>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d101      	bne.n	8002482 <HAL_GPIO_Init+0x21a>
 800247e:	2309      	movs	r3, #9
 8002480:	e012      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002482:	230a      	movs	r3, #10
 8002484:	e010      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002486:	2308      	movs	r3, #8
 8002488:	e00e      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800248a:	2307      	movs	r3, #7
 800248c:	e00c      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800248e:	2306      	movs	r3, #6
 8002490:	e00a      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002492:	2305      	movs	r3, #5
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 8002496:	2304      	movs	r3, #4
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x240>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b8:	4935      	ldr	r1, [pc, #212]	; (8002590 <HAL_GPIO_Init+0x328>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_GPIO_Init+0x354>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a34      	ldr	r2, [pc, #208]	; (80025bc <HAL_GPIO_Init+0x354>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b32      	ldr	r3, [pc, #200]	; (80025bc <HAL_GPIO_Init+0x354>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a29      	ldr	r2, [pc, #164]	; (80025bc <HAL_GPIO_Init+0x354>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251a:	4b28      	ldr	r3, [pc, #160]	; (80025bc <HAL_GPIO_Init+0x354>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <HAL_GPIO_Init+0x354>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <HAL_GPIO_Init+0x354>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_GPIO_Init+0x354>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f ae84 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40022400 	.word	0x40022400
 80025bc:	40013c00 	.word	0x40013c00

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e267      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d075      	beq.n	80026fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	4b88      	ldr	r3, [pc, #544]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	2b04      	cmp	r3, #4
 800261c:	d00c      	beq.n	8002638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261e:	4b85      	ldr	r3, [pc, #532]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002626:	2b08      	cmp	r3, #8
 8002628:	d112      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262a:	4b82      	ldr	r3, [pc, #520]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002632:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002636:	d10b      	bne.n	8002650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	4b7e      	ldr	r3, [pc, #504]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d05b      	beq.n	80026fc <HAL_RCC_OscConfig+0x108>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d157      	bne.n	80026fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e242      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002658:	d106      	bne.n	8002668 <HAL_RCC_OscConfig+0x74>
 800265a:	4b76      	ldr	r3, [pc, #472]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a75      	ldr	r2, [pc, #468]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0x98>
 8002672:	4b70      	ldr	r3, [pc, #448]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6f      	ldr	r2, [pc, #444]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b6d      	ldr	r3, [pc, #436]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6c      	ldr	r2, [pc, #432]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xb0>
 800268c:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a68      	ldr	r2, [pc, #416]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7ff f832 	bl	8001714 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7ff f82e 	bl	8001714 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e207      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b5b      	ldr	r3, [pc, #364]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xc0>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff f81e 	bl	8001714 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026dc:	f7ff f81a 	bl	8001714 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1f3      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b51      	ldr	r3, [pc, #324]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0xe8>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d063      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	4b4a      	ldr	r3, [pc, #296]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002716:	4b47      	ldr	r3, [pc, #284]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11c      	bne.n	800275c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002722:	4b44      	ldr	r3, [pc, #272]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x152>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1c7      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b3b      	ldr	r3, [pc, #236]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4937      	ldr	r1, [pc, #220]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	e03a      	b.n	80027d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002764:	4b34      	ldr	r3, [pc, #208]	; (8002838 <HAL_RCC_OscConfig+0x244>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe ffd3 	bl	8001714 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe ffcf 	bl	8001714 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1a8      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	4b2b      	ldr	r3, [pc, #172]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4925      	ldr	r1, [pc, #148]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_OscConfig+0x244>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ac:	f7fe ffb2 	bl	8001714 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe ffae 	bl	8001714 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e187      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d036      	beq.n	800284c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d016      	beq.n	8002814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCC_OscConfig+0x248>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe ff92 	bl	8001714 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe ff8e 	bl	8001714 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e167      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x240>)
 8002808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x200>
 8002812:	e01b      	b.n	800284c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_OscConfig+0x248>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281a:	f7fe ff7b 	bl	8001714 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	e00e      	b.n	8002840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe ff77 	bl	8001714 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d907      	bls.n	8002840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e150      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
 8002834:	40023800 	.word	0x40023800
 8002838:	42470000 	.word	0x42470000
 800283c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002840:	4b88      	ldr	r3, [pc, #544]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ea      	bne.n	8002822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8097 	beq.w	8002988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285e:	4b81      	ldr	r3, [pc, #516]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10f      	bne.n	800288a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60bb      	str	r3, [r7, #8]
 800286e:	4b7d      	ldr	r3, [pc, #500]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a7c      	ldr	r2, [pc, #496]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b7a      	ldr	r3, [pc, #488]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288a:	4b77      	ldr	r3, [pc, #476]	; (8002a68 <HAL_RCC_OscConfig+0x474>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d118      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002896:	4b74      	ldr	r3, [pc, #464]	; (8002a68 <HAL_RCC_OscConfig+0x474>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a73      	ldr	r2, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x474>)
 800289c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a2:	f7fe ff37 	bl	8001714 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028aa:	f7fe ff33 	bl	8001714 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e10c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028bc:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCC_OscConfig+0x474>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d106      	bne.n	80028de <HAL_RCC_OscConfig+0x2ea>
 80028d0:	4b64      	ldr	r3, [pc, #400]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a63      	ldr	r2, [pc, #396]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	e01c      	b.n	8002918 <HAL_RCC_OscConfig+0x324>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b05      	cmp	r3, #5
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0x30c>
 80028e6:	4b5f      	ldr	r3, [pc, #380]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ea:	4a5e      	ldr	r2, [pc, #376]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	6713      	str	r3, [r2, #112]	; 0x70
 80028f2:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0x324>
 8002900:	4b58      	ldr	r3, [pc, #352]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002904:	4a57      	ldr	r2, [pc, #348]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002906:	f023 0301 	bic.w	r3, r3, #1
 800290a:	6713      	str	r3, [r2, #112]	; 0x70
 800290c:	4b55      	ldr	r3, [pc, #340]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002912:	f023 0304 	bic.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d015      	beq.n	800294c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fef8 	bl	8001714 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fef4 	bl	8001714 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0cb      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293e:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0ee      	beq.n	8002928 <HAL_RCC_OscConfig+0x334>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7fe fee2 	bl	8001714 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7fe fede 	bl	8001714 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0b5      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296a:	4b3e      	ldr	r3, [pc, #248]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ee      	bne.n	8002954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	4a38      	ldr	r2, [pc, #224]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 80a1 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002992:	4b34      	ldr	r3, [pc, #208]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
 800299a:	2b08      	cmp	r3, #8
 800299c:	d05c      	beq.n	8002a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d141      	bne.n	8002a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_RCC_OscConfig+0x478>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe feb2 	bl	8001714 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe feae 	bl	8001714 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e087      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	491b      	ldr	r1, [pc, #108]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x478>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fe87 	bl	8001714 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fe83 	bl	8001714 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e05c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x416>
 8002a28:	e054      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2a:	4b10      	ldr	r3, [pc, #64]	; (8002a6c <HAL_RCC_OscConfig+0x478>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe70 	bl	8001714 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fe6c 	bl	8001714 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e045      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x444>
 8002a56:	e03d      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e038      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
 8002a64:	40023800 	.word	0x40023800
 8002a68:	40007000 	.word	0x40007000
 8002a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x4ec>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d028      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d121      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d11a      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0cc      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d90c      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b65      	ldr	r3, [pc, #404]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b63      	ldr	r3, [pc, #396]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d001      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0b8      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d020      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b38:	4b59      	ldr	r3, [pc, #356]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d005      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b50:	4b53      	ldr	r3, [pc, #332]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4a52      	ldr	r2, [pc, #328]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b5c:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	494d      	ldr	r1, [pc, #308]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d044      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d119      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e07f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d107      	bne.n	8002bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba2:	4b3f      	ldr	r3, [pc, #252]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d109      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e06f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e067      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 0203 	bic.w	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	4934      	ldr	r1, [pc, #208]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd4:	f7fe fd9e 	bl	8001714 <HAL_GetTick>
 8002bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	e00a      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bdc:	f7fe fd9a 	bl	8001714 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e04f      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 020c 	and.w	r2, r3, #12
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d1eb      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 030f 	and.w	r3, r3, #15
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d20c      	bcs.n	8002c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCC_ClockConfig+0x1b8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d001      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e032      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c38:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4916      	ldr	r1, [pc, #88]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d009      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	490e      	ldr	r1, [pc, #56]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6a:	f000 f821 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	490a      	ldr	r1, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	5ccb      	ldrb	r3, [r1, r3]
 8002c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c82:	4a09      	ldr	r2, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe fcfe 	bl	800168c <HAL_InitTick>

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023c00 	.word	0x40023c00
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	08005fc8 	.word	0x08005fc8
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb4:	b094      	sub	sp, #80	; 0x50
 8002cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc8:	4b79      	ldr	r3, [pc, #484]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	f200 80e1 	bhi.w	8002e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce2:	e0db      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce4:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ce8:	e0db      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cee:	e0d8      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfa:	4b6d      	ldr	r3, [pc, #436]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	4b6a      	ldr	r3, [pc, #424]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	099b      	lsrs	r3, r3, #6
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d22:	4622      	mov	r2, r4
 8002d24:	462b      	mov	r3, r5
 8002d26:	f04f 0000 	mov.w	r0, #0
 8002d2a:	f04f 0100 	mov.w	r1, #0
 8002d2e:	0159      	lsls	r1, r3, #5
 8002d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d34:	0150      	lsls	r0, r2, #5
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	1a51      	subs	r1, r2, r1
 8002d3e:	6139      	str	r1, [r7, #16]
 8002d40:	4629      	mov	r1, r5
 8002d42:	eb63 0301 	sbc.w	r3, r3, r1
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d54:	4659      	mov	r1, fp
 8002d56:	018b      	lsls	r3, r1, #6
 8002d58:	4651      	mov	r1, sl
 8002d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d5e:	4651      	mov	r1, sl
 8002d60:	018a      	lsls	r2, r1, #6
 8002d62:	4651      	mov	r1, sl
 8002d64:	ebb2 0801 	subs.w	r8, r2, r1
 8002d68:	4659      	mov	r1, fp
 8002d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d82:	4690      	mov	r8, r2
 8002d84:	4699      	mov	r9, r3
 8002d86:	4623      	mov	r3, r4
 8002d88:	eb18 0303 	adds.w	r3, r8, r3
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	462b      	mov	r3, r5
 8002d90:	eb49 0303 	adc.w	r3, r9, r3
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da2:	4629      	mov	r1, r5
 8002da4:	024b      	lsls	r3, r1, #9
 8002da6:	4621      	mov	r1, r4
 8002da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dac:	4621      	mov	r1, r4
 8002dae:	024a      	lsls	r2, r1, #9
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	2200      	movs	r2, #0
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc0:	f7fd fd74 	bl	80008ac <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4613      	mov	r3, r2
 8002dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dcc:	e058      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dce:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	099b      	lsrs	r3, r3, #6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	4611      	mov	r1, r2
 8002dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dde:	623b      	str	r3, [r7, #32]
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002de8:	4642      	mov	r2, r8
 8002dea:	464b      	mov	r3, r9
 8002dec:	f04f 0000 	mov.w	r0, #0
 8002df0:	f04f 0100 	mov.w	r1, #0
 8002df4:	0159      	lsls	r1, r3, #5
 8002df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfa:	0150      	lsls	r0, r2, #5
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	460b      	mov	r3, r1
 8002e00:	4641      	mov	r1, r8
 8002e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e06:	4649      	mov	r1, r9
 8002e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e20:	ebb2 040a 	subs.w	r4, r2, sl
 8002e24:	eb63 050b 	sbc.w	r5, r3, fp
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	00eb      	lsls	r3, r5, #3
 8002e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e36:	00e2      	lsls	r2, r4, #3
 8002e38:	4614      	mov	r4, r2
 8002e3a:	461d      	mov	r5, r3
 8002e3c:	4643      	mov	r3, r8
 8002e3e:	18e3      	adds	r3, r4, r3
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	464b      	mov	r3, r9
 8002e44:	eb45 0303 	adc.w	r3, r5, r3
 8002e48:	607b      	str	r3, [r7, #4]
 8002e4a:	f04f 0200 	mov.w	r2, #0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e56:	4629      	mov	r1, r5
 8002e58:	028b      	lsls	r3, r1, #10
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e60:	4621      	mov	r1, r4
 8002e62:	028a      	lsls	r2, r1, #10
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	61fa      	str	r2, [r7, #28]
 8002e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e74:	f7fd fd1a 	bl	80008ac <__aeabi_uldivmod>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3750      	adds	r7, #80	; 0x50
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200

08002ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ed8:	f7ff fff0 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0a9b      	lsrs	r3, r3, #10
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4903      	ldr	r1, [pc, #12]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	08005fd8 	.word	0x08005fd8

08002efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f00:	f7ff ffdc 	bl	8002ebc <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0b5b      	lsrs	r3, r3, #13
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4903      	ldr	r1, [pc, #12]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	08005fd8 	.word	0x08005fd8

08002f24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e041      	b.n	8002fba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d106      	bne.n	8002f50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa24 	bl	8001398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4610      	mov	r0, r2
 8002f64:	f000 fa2a 	bl	80033bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d122      	bne.n	800301e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11b      	bne.n	800301e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0202 	mvn.w	r2, #2
 8002fee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f9bb 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 800300a:	e005      	b.n	8003018 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9ad 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9be 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d122      	bne.n	8003072 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d11b      	bne.n	8003072 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0204 	mvn.w	r2, #4
 8003042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f991 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 800305e:	e005      	b.n	800306c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f983 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f994 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b08      	cmp	r3, #8
 800307e:	d122      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11b      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0208 	mvn.w	r2, #8
 8003096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2204      	movs	r2, #4
 800309c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f967 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 80030b2:	e005      	b.n	80030c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f959 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f96a 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d122      	bne.n	800311a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d11b      	bne.n	800311a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0210 	mvn.w	r2, #16
 80030ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2208      	movs	r2, #8
 80030f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f93d 	bl	8003380 <HAL_TIM_IC_CaptureCallback>
 8003106:	e005      	b.n	8003114 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f92f 	bl	800336c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f940 	bl	8003394 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10e      	bne.n	8003146 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0201 	mvn.w	r2, #1
 800313e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f909 	bl	8003358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d10e      	bne.n	8003172 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d107      	bne.n	8003172 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fbfb 	bl	8003968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d10e      	bne.n	800319e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d107      	bne.n	800319e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f905 	bl	80033a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d10e      	bne.n	80031ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0220 	mvn.w	r2, #32
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fbc5 	bl	8003954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e0ae      	b.n	8003350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b0c      	cmp	r3, #12
 80031fe:	f200 809f 	bhi.w	8003340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	0800323d 	.word	0x0800323d
 800320c:	08003341 	.word	0x08003341
 8003210:	08003341 	.word	0x08003341
 8003214:	08003341 	.word	0x08003341
 8003218:	0800327d 	.word	0x0800327d
 800321c:	08003341 	.word	0x08003341
 8003220:	08003341 	.word	0x08003341
 8003224:	08003341 	.word	0x08003341
 8003228:	080032bf 	.word	0x080032bf
 800322c:	08003341 	.word	0x08003341
 8003230:	08003341 	.word	0x08003341
 8003234:	08003341 	.word	0x08003341
 8003238:	080032ff 	.word	0x080032ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f95a 	bl	80034fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0208 	orr.w	r2, r2, #8
 8003256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0204 	bic.w	r2, r2, #4
 8003266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6999      	ldr	r1, [r3, #24]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	619a      	str	r2, [r3, #24]
      break;
 800327a:	e064      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f9aa 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6999      	ldr	r1, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	021a      	lsls	r2, r3, #8
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	619a      	str	r2, [r3, #24]
      break;
 80032bc:	e043      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f9ff 	bl	80036c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0208 	orr.w	r2, r2, #8
 80032d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0204 	bic.w	r2, r2, #4
 80032e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69d9      	ldr	r1, [r3, #28]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	61da      	str	r2, [r3, #28]
      break;
 80032fc:	e023      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fa53 	bl	80037b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69d9      	ldr	r1, [r3, #28]
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	61da      	str	r2, [r3, #28]
      break;
 800333e:	e002      	b.n	8003346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	75fb      	strb	r3, [r7, #23]
      break;
 8003344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a40      	ldr	r2, [pc, #256]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d00f      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a3c      	ldr	r2, [pc, #240]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a3b      	ldr	r2, [pc, #236]	; (80034dc <TIM_Base_SetConfig+0x120>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3a      	ldr	r2, [pc, #232]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2f      	ldr	r2, [pc, #188]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d02b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d027      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2c      	ldr	r2, [pc, #176]	; (80034d4 <TIM_Base_SetConfig+0x118>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d023      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <TIM_Base_SetConfig+0x11c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a2a      	ldr	r2, [pc, #168]	; (80034dc <TIM_Base_SetConfig+0x120>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d01b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a29      	ldr	r2, [pc, #164]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <TIM_Base_SetConfig+0x128>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <TIM_Base_SetConfig+0x12c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a26      	ldr	r2, [pc, #152]	; (80034ec <TIM_Base_SetConfig+0x130>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a25      	ldr	r2, [pc, #148]	; (80034f0 <TIM_Base_SetConfig+0x134>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a24      	ldr	r2, [pc, #144]	; (80034f4 <TIM_Base_SetConfig+0x138>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a23      	ldr	r2, [pc, #140]	; (80034f8 <TIM_Base_SetConfig+0x13c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <TIM_Base_SetConfig+0x114>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d003      	beq.n	80034b4 <TIM_Base_SetConfig+0xf8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <TIM_Base_SetConfig+0x124>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	615a      	str	r2, [r3, #20]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40010000 	.word	0x40010000
 80034d4:	40000400 	.word	0x40000400
 80034d8:	40000800 	.word	0x40000800
 80034dc:	40000c00 	.word	0x40000c00
 80034e0:	40010400 	.word	0x40010400
 80034e4:	40014000 	.word	0x40014000
 80034e8:	40014400 	.word	0x40014400
 80034ec:	40014800 	.word	0x40014800
 80034f0:	40001800 	.word	0x40001800
 80034f4:	40001c00 	.word	0x40001c00
 80034f8:	40002000 	.word	0x40002000

080034fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f023 0201 	bic.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f023 0302 	bic.w	r3, r3, #2
 8003544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a20      	ldr	r2, [pc, #128]	; (80035d4 <TIM_OC1_SetConfig+0xd8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_OC1_SetConfig+0x64>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <TIM_OC1_SetConfig+0xdc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10c      	bne.n	800357a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 0308 	bic.w	r3, r3, #8
 8003566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <TIM_OC1_SetConfig+0xd8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_OC1_SetConfig+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a14      	ldr	r2, [pc, #80]	; (80035d8 <TIM_OC1_SetConfig+0xdc>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d111      	bne.n	80035ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	621a      	str	r2, [r3, #32]
}
 80035c8:	bf00      	nop
 80035ca:	371c      	adds	r7, #28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40010000 	.word	0x40010000
 80035d8:	40010400 	.word	0x40010400

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_OC2_SetConfig+0x68>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a21      	ldr	r2, [pc, #132]	; (80036c4 <TIM_OC2_SetConfig+0xe8>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10d      	bne.n	8003660 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800364a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800365e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <TIM_OC2_SetConfig+0xe4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC2_SetConfig+0x94>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a16      	ldr	r2, [pc, #88]	; (80036c4 <TIM_OC2_SetConfig+0xe8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d113      	bne.n	8003698 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800367e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4313      	orrs	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010400 	.word	0x40010400

080036c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f023 0303 	bic.w	r3, r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <TIM_OC3_SetConfig+0xe0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC3_SetConfig+0x66>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a20      	ldr	r2, [pc, #128]	; (80037ac <TIM_OC3_SetConfig+0xe4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d10d      	bne.n	800374a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a16      	ldr	r2, [pc, #88]	; (80037a8 <TIM_OC3_SetConfig+0xe0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d003      	beq.n	800375a <TIM_OC3_SetConfig+0x92>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a15      	ldr	r2, [pc, #84]	; (80037ac <TIM_OC3_SetConfig+0xe4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d113      	bne.n	8003782 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003760:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	621a      	str	r2, [r3, #32]
}
 800379c:	bf00      	nop
 800379e:	371c      	adds	r7, #28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	40010000 	.word	0x40010000
 80037ac:	40010400 	.word	0x40010400

080037b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	031b      	lsls	r3, r3, #12
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <TIM_OC4_SetConfig+0xa4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC4_SetConfig+0x68>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <TIM_OC4_SetConfig+0xa8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800381e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40010400 	.word	0x40010400

0800385c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003870:	2302      	movs	r3, #2
 8003872:	e05a      	b.n	800392a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d01d      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d10c      	bne.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003904:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	4313      	orrs	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40001800 	.word	0x40001800

08003954 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e03f      	b.n	8003a0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fd5a 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2224      	movs	r2, #36	; 0x24
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f929 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691a      	ldr	r2, [r3, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	; 0x28
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d17c      	bne.n	8003b30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_UART_Transmit+0x2c>
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e075      	b.n	8003b32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Transmit+0x3e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e06e      	b.n	8003b32 <HAL_UART_Transmit+0x11c>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a6a:	f7fd fe53 	bl	8001714 <HAL_GetTick>
 8003a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	88fa      	ldrh	r2, [r7, #6]
 8003a7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a84:	d108      	bne.n	8003a98 <HAL_UART_Transmit+0x82>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	e003      	b.n	8003aa0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003aa8:	e02a      	b.n	8003b00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	f000 f840 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e036      	b.n	8003b32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10b      	bne.n	8003ae2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	881b      	ldrh	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	3302      	adds	r3, #2
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e007      	b.n	8003af2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	781a      	ldrb	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	3301      	adds	r3, #1
 8003af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1cf      	bne.n	8003aaa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2200      	movs	r2, #0
 8003b12:	2140      	movs	r1, #64	; 0x40
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f810 	bl	8003b3a <UART_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e006      	b.n	8003b32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b090      	sub	sp, #64	; 0x40
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4a:	e050      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b52:	d04c      	beq.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b5a:	f7fd fddb 	bl	8001714 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d241      	bcs.n	8003bee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	330c      	adds	r3, #12
 8003b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b8a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e5      	bne.n	8003b6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3314      	adds	r3, #20
 8003ba4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	e853 3f00 	ldrex	r3, [r3]
 8003bac:	613b      	str	r3, [r7, #16]
   return(result);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3314      	adds	r3, #20
 8003bbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bbe:	623a      	str	r2, [r7, #32]
 8003bc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc2:	69f9      	ldr	r1, [r7, #28]
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	e841 2300 	strex	r3, r2, [r1]
 8003bca:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1e5      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e00f      	b.n	8003c0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d09f      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3740      	adds	r7, #64	; 0x40
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b0c0      	sub	sp, #256	; 0x100
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c34:	68d9      	ldr	r1, [r3, #12]
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	ea40 0301 	orr.w	r3, r0, r1
 8003c40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c70:	f021 010c 	bic.w	r1, r1, #12
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c92:	6999      	ldr	r1, [r3, #24]
 8003c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	ea40 0301 	orr.w	r3, r0, r1
 8003c9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4b8f      	ldr	r3, [pc, #572]	; (8003ee4 <UART_SetConfig+0x2cc>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d005      	beq.n	8003cb8 <UART_SetConfig+0xa0>
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <UART_SetConfig+0x2d0>)
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d104      	bne.n	8003cc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb8:	f7ff f920 	bl	8002efc <HAL_RCC_GetPCLK2Freq>
 8003cbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003cc0:	e003      	b.n	8003cca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cc2:	f7ff f907 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003cc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cd4:	f040 810c 	bne.w	8003ef0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ce2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ce6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	1891      	adds	r1, r2, r2
 8003cf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003cf2:	415b      	adcs	r3, r3
 8003cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	eb12 0801 	adds.w	r8, r2, r1
 8003d00:	4629      	mov	r1, r5
 8003d02:	eb43 0901 	adc.w	r9, r3, r1
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1a:	4690      	mov	r8, r2
 8003d1c:	4699      	mov	r9, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	eb18 0303 	adds.w	r3, r8, r3
 8003d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003d28:	462b      	mov	r3, r5
 8003d2a:	eb49 0303 	adc.w	r3, r9, r3
 8003d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003d42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d46:	460b      	mov	r3, r1
 8003d48:	18db      	adds	r3, r3, r3
 8003d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	eb42 0303 	adc.w	r3, r2, r3
 8003d52:	657b      	str	r3, [r7, #84]	; 0x54
 8003d54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d5c:	f7fc fda6 	bl	80008ac <__aeabi_uldivmod>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <UART_SetConfig+0x2d4>)
 8003d66:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6a:	095b      	lsrs	r3, r3, #5
 8003d6c:	011c      	lsls	r4, r3, #4
 8003d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d72:	2200      	movs	r2, #0
 8003d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d80:	4642      	mov	r2, r8
 8003d82:	464b      	mov	r3, r9
 8003d84:	1891      	adds	r1, r2, r2
 8003d86:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d88:	415b      	adcs	r3, r3
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d90:	4641      	mov	r1, r8
 8003d92:	eb12 0a01 	adds.w	sl, r2, r1
 8003d96:	4649      	mov	r1, r9
 8003d98:	eb43 0b01 	adc.w	fp, r3, r1
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003da8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003db0:	4692      	mov	sl, r2
 8003db2:	469b      	mov	fp, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	eb4b 0303 	adc.w	r3, fp, r3
 8003dc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003dd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	18db      	adds	r3, r3, r3
 8003de0:	643b      	str	r3, [r7, #64]	; 0x40
 8003de2:	4613      	mov	r3, r2
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003dee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003df2:	f7fc fd5b 	bl	80008ac <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4b3b      	ldr	r3, [pc, #236]	; (8003eec <UART_SetConfig+0x2d4>)
 8003dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	2264      	movs	r2, #100	; 0x64
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	1acb      	subs	r3, r1, r3
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003e12:	4b36      	ldr	r3, [pc, #216]	; (8003eec <UART_SetConfig+0x2d4>)
 8003e14:	fba3 2302 	umull	r2, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e20:	441c      	add	r4, r3
 8003e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003e30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003e34:	4642      	mov	r2, r8
 8003e36:	464b      	mov	r3, r9
 8003e38:	1891      	adds	r1, r2, r2
 8003e3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e3c:	415b      	adcs	r3, r3
 8003e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e44:	4641      	mov	r1, r8
 8003e46:	1851      	adds	r1, r2, r1
 8003e48:	6339      	str	r1, [r7, #48]	; 0x30
 8003e4a:	4649      	mov	r1, r9
 8003e4c:	414b      	adcs	r3, r1
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	00cb      	lsls	r3, r1, #3
 8003e60:	4651      	mov	r1, sl
 8003e62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e66:	4651      	mov	r1, sl
 8003e68:	00ca      	lsls	r2, r1, #3
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	4642      	mov	r2, r8
 8003e72:	189b      	adds	r3, r3, r2
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e78:	464b      	mov	r3, r9
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	eb42 0303 	adc.w	r3, r2, r3
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e98:	460b      	mov	r3, r1
 8003e9a:	18db      	adds	r3, r3, r3
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	eb42 0303 	adc.w	r3, r2, r3
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003eae:	f7fc fcfd 	bl	80008ac <__aeabi_uldivmod>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4b0d      	ldr	r3, [pc, #52]	; (8003eec <UART_SetConfig+0x2d4>)
 8003eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ebc:	095b      	lsrs	r3, r3, #5
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	3332      	adds	r3, #50	; 0x32
 8003eca:	4a08      	ldr	r2, [pc, #32]	; (8003eec <UART_SetConfig+0x2d4>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	f003 0207 	and.w	r2, r3, #7
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4422      	add	r2, r4
 8003ede:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ee0:	e105      	b.n	80040ee <UART_SetConfig+0x4d6>
 8003ee2:	bf00      	nop
 8003ee4:	40011000 	.word	0x40011000
 8003ee8:	40011400 	.word	0x40011400
 8003eec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003efa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003efe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003f02:	4642      	mov	r2, r8
 8003f04:	464b      	mov	r3, r9
 8003f06:	1891      	adds	r1, r2, r2
 8003f08:	6239      	str	r1, [r7, #32]
 8003f0a:	415b      	adcs	r3, r3
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f12:	4641      	mov	r1, r8
 8003f14:	1854      	adds	r4, r2, r1
 8003f16:	4649      	mov	r1, r9
 8003f18:	eb43 0501 	adc.w	r5, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	00eb      	lsls	r3, r5, #3
 8003f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2a:	00e2      	lsls	r2, r4, #3
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	461d      	mov	r5, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	18e3      	adds	r3, r4, r3
 8003f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f38:	464b      	mov	r3, r9
 8003f3a:	eb45 0303 	adc.w	r3, r5, r3
 8003f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f5e:	4629      	mov	r1, r5
 8003f60:	008b      	lsls	r3, r1, #2
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f68:	4621      	mov	r1, r4
 8003f6a:	008a      	lsls	r2, r1, #2
 8003f6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f70:	f7fc fc9c 	bl	80008ac <__aeabi_uldivmod>
 8003f74:	4602      	mov	r2, r0
 8003f76:	460b      	mov	r3, r1
 8003f78:	4b60      	ldr	r3, [pc, #384]	; (80040fc <UART_SetConfig+0x4e4>)
 8003f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f7e:	095b      	lsrs	r3, r3, #5
 8003f80:	011c      	lsls	r4, r3, #4
 8003f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	1891      	adds	r1, r2, r2
 8003f9a:	61b9      	str	r1, [r7, #24]
 8003f9c:	415b      	adcs	r3, r3
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	1851      	adds	r1, r2, r1
 8003fa8:	6139      	str	r1, [r7, #16]
 8003faa:	4649      	mov	r1, r9
 8003fac:	414b      	adcs	r3, r1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fbc:	4659      	mov	r1, fp
 8003fbe:	00cb      	lsls	r3, r1, #3
 8003fc0:	4651      	mov	r1, sl
 8003fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc6:	4651      	mov	r1, sl
 8003fc8:	00ca      	lsls	r2, r1, #3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	189b      	adds	r3, r3, r2
 8003fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fd8:	464b      	mov	r3, r9
 8003fda:	460a      	mov	r2, r1
 8003fdc:	eb42 0303 	adc.w	r3, r2, r3
 8003fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ffc:	4649      	mov	r1, r9
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	4641      	mov	r1, r8
 8004002:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004006:	4641      	mov	r1, r8
 8004008:	008a      	lsls	r2, r1, #2
 800400a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800400e:	f7fc fc4d 	bl	80008ac <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4b39      	ldr	r3, [pc, #228]	; (80040fc <UART_SetConfig+0x4e4>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	095b      	lsrs	r3, r3, #5
 800401e:	2164      	movs	r1, #100	; 0x64
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	3332      	adds	r3, #50	; 0x32
 800402a:	4a34      	ldr	r2, [pc, #208]	; (80040fc <UART_SetConfig+0x4e4>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004036:	441c      	add	r4, r3
 8004038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800403c:	2200      	movs	r2, #0
 800403e:	673b      	str	r3, [r7, #112]	; 0x70
 8004040:	677a      	str	r2, [r7, #116]	; 0x74
 8004042:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	1891      	adds	r1, r2, r2
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	415b      	adcs	r3, r3
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004056:	4641      	mov	r1, r8
 8004058:	1851      	adds	r1, r2, r1
 800405a:	6039      	str	r1, [r7, #0]
 800405c:	4649      	mov	r1, r9
 800405e:	414b      	adcs	r3, r1
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800406e:	4659      	mov	r1, fp
 8004070:	00cb      	lsls	r3, r1, #3
 8004072:	4651      	mov	r1, sl
 8004074:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004078:	4651      	mov	r1, sl
 800407a:	00ca      	lsls	r2, r1, #3
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	4603      	mov	r3, r0
 8004082:	4642      	mov	r2, r8
 8004084:	189b      	adds	r3, r3, r2
 8004086:	66bb      	str	r3, [r7, #104]	; 0x68
 8004088:	464b      	mov	r3, r9
 800408a:	460a      	mov	r2, r1
 800408c:	eb42 0303 	adc.w	r3, r2, r3
 8004090:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	663b      	str	r3, [r7, #96]	; 0x60
 800409c:	667a      	str	r2, [r7, #100]	; 0x64
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80040aa:	4649      	mov	r1, r9
 80040ac:	008b      	lsls	r3, r1, #2
 80040ae:	4641      	mov	r1, r8
 80040b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040b4:	4641      	mov	r1, r8
 80040b6:	008a      	lsls	r2, r1, #2
 80040b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80040bc:	f7fc fbf6 	bl	80008ac <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <UART_SetConfig+0x4e4>)
 80040c6:	fba3 1302 	umull	r1, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2164      	movs	r1, #100	; 0x64
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a08      	ldr	r2, [pc, #32]	; (80040fc <UART_SetConfig+0x4e4>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4422      	add	r2, r4
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	bf00      	nop
 80040f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040f4:	46bd      	mov	sp, r7
 80040f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fa:	bf00      	nop
 80040fc:	51eb851f 	.word	0x51eb851f

08004100 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	4603      	mov	r3, r0
 8004108:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800410e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004112:	2b84      	cmp	r3, #132	; 0x84
 8004114:	d005      	beq.n	8004122 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004116:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4413      	add	r3, r2
 800411e:	3303      	adds	r3, #3
 8004120:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004122:	68fb      	ldr	r3, [r7, #12]
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004134:	f000 fade 	bl	80046f4 <vTaskStartScheduler>
  
  return osOK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	bd80      	pop	{r7, pc}

0800413e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800413e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004140:	b089      	sub	sp, #36	; 0x24
 8004142:	af04      	add	r7, sp, #16
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <osThreadCreate+0x54>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01c      	beq.n	8004192 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685c      	ldr	r4, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681d      	ldr	r5, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691e      	ldr	r6, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff ffc8 	bl	8004100 <makeFreeRtosPriority>
 8004170:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800417a:	9202      	str	r2, [sp, #8]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	9100      	str	r1, [sp, #0]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	4632      	mov	r2, r6
 8004184:	4629      	mov	r1, r5
 8004186:	4620      	mov	r0, r4
 8004188:	f000 f8ed 	bl	8004366 <xTaskCreateStatic>
 800418c:	4603      	mov	r3, r0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e01c      	b.n	80041cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685c      	ldr	r4, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800419e:	b29e      	uxth	r6, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff ffaa 	bl	8004100 <makeFreeRtosPriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f107 030c 	add.w	r3, r7, #12
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	9200      	str	r2, [sp, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	4632      	mov	r2, r6
 80041ba:	4629      	mov	r1, r5
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 f92f 	bl	8004420 <xTaskCreate>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d001      	beq.n	80041cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	e000      	b.n	80041ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80041cc:	68fb      	ldr	r3, [r7, #12]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <osDelay+0x16>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	e000      	b.n	80041ee <osDelay+0x18>
 80041ec:	2301      	movs	r3, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fa4c 	bl	800468c <vTaskDelay>
  
  return osOK;
 80041f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f103 0208 	add.w	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f04f 32ff 	mov.w	r2, #4294967295
 8004216:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f103 0208 	add.w	r2, r3, #8
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f103 0208 	add.w	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	601a      	str	r2, [r3, #0]
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d103      	bne.n	80042c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e00c      	b.n	80042da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3308      	adds	r3, #8
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e002      	b.n	80042ce <vListInsert+0x2e>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d2f6      	bcs.n	80042c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	6892      	ldr	r2, [r2, #8]
 8004328:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6852      	ldr	r2, [r2, #4]
 8004332:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d103      	bne.n	8004346 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1e5a      	subs	r2, r3, #1
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004366:	b580      	push	{r7, lr}
 8004368:	b08e      	sub	sp, #56	; 0x38
 800436a:	af04      	add	r7, sp, #16
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10a      	bne.n	8004390 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800438c:	bf00      	nop
 800438e:	e7fe      	b.n	800438e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <xTaskCreateStatic+0x46>
	__asm volatile
 8004396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439a:	f383 8811 	msr	BASEPRI, r3
 800439e:	f3bf 8f6f 	isb	sy
 80043a2:	f3bf 8f4f 	dsb	sy
 80043a6:	61fb      	str	r3, [r7, #28]
}
 80043a8:	bf00      	nop
 80043aa:	e7fe      	b.n	80043aa <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043ac:	2354      	movs	r3, #84	; 0x54
 80043ae:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b54      	cmp	r3, #84	; 0x54
 80043b4:	d00a      	beq.n	80043cc <xTaskCreateStatic+0x66>
	__asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	61bb      	str	r3, [r7, #24]
}
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01e      	beq.n	8004412 <xTaskCreateStatic+0xac>
 80043d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d01b      	beq.n	8004412 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043ec:	2300      	movs	r3, #0
 80043ee:	9303      	str	r3, [sp, #12]
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	9302      	str	r3, [sp, #8]
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	9301      	str	r3, [sp, #4]
 80043fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f850 	bl	80044aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800440a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800440c:	f000 f8d4 	bl	80045b8 <prvAddNewTaskToReadyList>
 8004410:	e001      	b.n	8004416 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004416:	697b      	ldr	r3, [r7, #20]
	}
 8004418:	4618      	mov	r0, r3
 800441a:	3728      	adds	r7, #40	; 0x28
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b08c      	sub	sp, #48	; 0x30
 8004424:	af04      	add	r7, sp, #16
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4613      	mov	r3, r2
 800442e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fee7 	bl	8005208 <pvPortMalloc>
 800443a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00e      	beq.n	8004460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004442:	2054      	movs	r0, #84	; 0x54
 8004444:	f000 fee0 	bl	8005208 <pvPortMalloc>
 8004448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
 8004456:	e005      	b.n	8004464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004458:	6978      	ldr	r0, [r7, #20]
 800445a:	f000 ffa1 	bl	80053a0 <vPortFree>
 800445e:	e001      	b.n	8004464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	2300      	movs	r3, #0
 8004476:	9303      	str	r3, [sp, #12]
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	9302      	str	r3, [sp, #8]
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	9300      	str	r3, [sp, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f80e 	bl	80044aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800448e:	69f8      	ldr	r0, [r7, #28]
 8004490:	f000 f892 	bl	80045b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004494:	2301      	movs	r3, #1
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e002      	b.n	80044a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800449a:	f04f 33ff 	mov.w	r3, #4294967295
 800449e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044a0:	69bb      	ldr	r3, [r7, #24]
	}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3720      	adds	r7, #32
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b088      	sub	sp, #32
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	3b01      	subs	r3, #1
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	f023 0307 	bic.w	r3, r3, #7
 80044d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <prvInitialiseNewTask+0x48>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	617b      	str	r3, [r7, #20]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01f      	beq.n	8004538 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f8:	2300      	movs	r3, #0
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e012      	b.n	8004524 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	4413      	add	r3, r2
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	3334      	adds	r3, #52	; 0x34
 800450e:	460a      	mov	r2, r1
 8004510:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3301      	adds	r3, #1
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d9e9      	bls.n	80044fe <prvInitialiseNewTask+0x54>
 800452a:	e000      	b.n	800452e <prvInitialiseNewTask+0x84>
			{
				break;
 800452c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004536:	e003      	b.n	8004540 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	2b06      	cmp	r3, #6
 8004544:	d901      	bls.n	800454a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004546:	2306      	movs	r3, #6
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004554:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fe6c 	bl	800423e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	3318      	adds	r3, #24
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff fe67 	bl	800423e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004574:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	f1c3 0207 	rsb	r2, r3, #7
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	69b8      	ldr	r0, [r7, #24]
 800459a:	f000 fc23 	bl	8004de4 <pxPortInitialiseStack>
 800459e:	4602      	mov	r2, r0
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045b0:	bf00      	nop
 80045b2:	3720      	adds	r7, #32
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045c0:	f000 fd40 	bl	8005044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a29      	ldr	r2, [pc, #164]	; (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ce:	4b29      	ldr	r3, [pc, #164]	; (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045d6:	4a27      	ldr	r2, [pc, #156]	; (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045dc:	4b24      	ldr	r3, [pc, #144]	; (8004670 <prvAddNewTaskToReadyList+0xb8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d110      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045e4:	f000 fabc 	bl	8004b60 <prvInitialiseTaskLists>
 80045e8:	e00d      	b.n	8004606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <prvAddNewTaskToReadyList+0xc0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <prvAddNewTaskToReadyList+0xbc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d802      	bhi.n	8004606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004600:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <prvAddNewTaskToReadyList+0xbc>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004606:	4b1d      	ldr	r3, [pc, #116]	; (800467c <prvAddNewTaskToReadyList+0xc4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a1b      	ldr	r2, [pc, #108]	; (800467c <prvAddNewTaskToReadyList+0xc4>)
 800460e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	409a      	lsls	r2, r3
 8004618:	4b19      	ldr	r3, [pc, #100]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4313      	orrs	r3, r2
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4a15      	ldr	r2, [pc, #84]	; (8004684 <prvAddNewTaskToReadyList+0xcc>)
 8004630:	441a      	add	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7ff fe0d 	bl	8004258 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800463e:	f000 fd31 	bl	80050a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004642:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <prvAddNewTaskToReadyList+0xc0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00e      	beq.n	8004668 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800464a:	4b0a      	ldr	r3, [pc, #40]	; (8004674 <prvAddNewTaskToReadyList+0xbc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	429a      	cmp	r2, r3
 8004656:	d207      	bcs.n	8004668 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <prvAddNewTaskToReadyList+0xd0>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004668:	bf00      	nop
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	2000057c 	.word	0x2000057c
 8004674:	2000047c 	.word	0x2000047c
 8004678:	20000588 	.word	0x20000588
 800467c:	20000598 	.word	0x20000598
 8004680:	20000584 	.word	0x20000584
 8004684:	20000480 	.word	0x20000480
 8004688:	e000ed04 	.word	0xe000ed04

0800468c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d017      	beq.n	80046ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <vTaskDelay+0x60>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <vTaskDelay+0x30>
	__asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	60bb      	str	r3, [r7, #8]
}
 80046b8:	bf00      	nop
 80046ba:	e7fe      	b.n	80046ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046bc:	f000 f87a 	bl	80047b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046c0:	2100      	movs	r1, #0
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fb28 	bl	8004d18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046c8:	f000 f882 	bl	80047d0 <xTaskResumeAll>
 80046cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <vTaskDelay+0x64>)
 80046d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	200005a4 	.word	0x200005a4
 80046f0:	e000ed04 	.word	0xe000ed04

080046f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	; 0x28
 80046f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004702:	463a      	mov	r2, r7
 8004704:	1d39      	adds	r1, r7, #4
 8004706:	f107 0308 	add.w	r3, r7, #8
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fa50 	bl	8000bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	9202      	str	r2, [sp, #8]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	2300      	movs	r3, #0
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	2300      	movs	r3, #0
 8004720:	460a      	mov	r2, r1
 8004722:	491e      	ldr	r1, [pc, #120]	; (800479c <vTaskStartScheduler+0xa8>)
 8004724:	481e      	ldr	r0, [pc, #120]	; (80047a0 <vTaskStartScheduler+0xac>)
 8004726:	f7ff fe1e 	bl	8004366 <xTaskCreateStatic>
 800472a:	4603      	mov	r3, r0
 800472c:	4a1d      	ldr	r2, [pc, #116]	; (80047a4 <vTaskStartScheduler+0xb0>)
 800472e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004730:	4b1c      	ldr	r3, [pc, #112]	; (80047a4 <vTaskStartScheduler+0xb0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004738:	2301      	movs	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e001      	b.n	8004742 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d116      	bne.n	8004776 <vTaskStartScheduler+0x82>
	__asm volatile
 8004748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474c:	f383 8811 	msr	BASEPRI, r3
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	f3bf 8f4f 	dsb	sy
 8004758:	613b      	str	r3, [r7, #16]
}
 800475a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <vTaskStartScheduler+0xb4>)
 800475e:	f04f 32ff 	mov.w	r2, #4294967295
 8004762:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004764:	4b11      	ldr	r3, [pc, #68]	; (80047ac <vTaskStartScheduler+0xb8>)
 8004766:	2201      	movs	r2, #1
 8004768:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800476a:	4b11      	ldr	r3, [pc, #68]	; (80047b0 <vTaskStartScheduler+0xbc>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004770:	f000 fbc6 	bl	8004f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004774:	e00e      	b.n	8004794 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d10a      	bne.n	8004794 <vTaskStartScheduler+0xa0>
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	60fb      	str	r3, [r7, #12]
}
 8004790:	bf00      	nop
 8004792:	e7fe      	b.n	8004792 <vTaskStartScheduler+0x9e>
}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	08005fc0 	.word	0x08005fc0
 80047a0:	08004b31 	.word	0x08004b31
 80047a4:	200005a0 	.word	0x200005a0
 80047a8:	2000059c 	.word	0x2000059c
 80047ac:	20000588 	.word	0x20000588
 80047b0:	20000580 	.word	0x20000580

080047b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047b8:	4b04      	ldr	r3, [pc, #16]	; (80047cc <vTaskSuspendAll+0x18>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3301      	adds	r3, #1
 80047be:	4a03      	ldr	r2, [pc, #12]	; (80047cc <vTaskSuspendAll+0x18>)
 80047c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	200005a4 	.word	0x200005a4

080047d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047de:	4b41      	ldr	r3, [pc, #260]	; (80048e4 <xTaskResumeAll+0x114>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10a      	bne.n	80047fc <xTaskResumeAll+0x2c>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	603b      	str	r3, [r7, #0]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047fc:	f000 fc22 	bl	8005044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004800:	4b38      	ldr	r3, [pc, #224]	; (80048e4 <xTaskResumeAll+0x114>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3b01      	subs	r3, #1
 8004806:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <xTaskResumeAll+0x114>)
 8004808:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <xTaskResumeAll+0x114>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d161      	bne.n	80048d6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004812:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <xTaskResumeAll+0x118>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d05d      	beq.n	80048d6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800481a:	e02e      	b.n	800487a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800481c:	4b33      	ldr	r3, [pc, #204]	; (80048ec <xTaskResumeAll+0x11c>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3318      	adds	r3, #24
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fd72 	bl	8004312 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3304      	adds	r3, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f7ff fd6d 	bl	8004312 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <xTaskResumeAll+0x120>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4313      	orrs	r3, r2
 8004846:	4a2a      	ldr	r2, [pc, #168]	; (80048f0 <xTaskResumeAll+0x120>)
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <xTaskResumeAll+0x124>)
 8004858:	441a      	add	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	3304      	adds	r3, #4
 800485e:	4619      	mov	r1, r3
 8004860:	4610      	mov	r0, r2
 8004862:	f7ff fcf9 	bl	8004258 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486a:	4b23      	ldr	r3, [pc, #140]	; (80048f8 <xTaskResumeAll+0x128>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004874:	4b21      	ldr	r3, [pc, #132]	; (80048fc <xTaskResumeAll+0x12c>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800487a:	4b1c      	ldr	r3, [pc, #112]	; (80048ec <xTaskResumeAll+0x11c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1cc      	bne.n	800481c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004888:	f000 fa08 	bl	8004c9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800488c:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <xTaskResumeAll+0x130>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d010      	beq.n	80048ba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004898:	f000 f836 	bl	8004908 <xTaskIncrementTick>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80048a2:	4b16      	ldr	r3, [pc, #88]	; (80048fc <xTaskResumeAll+0x12c>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f1      	bne.n	8004898 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80048b4:	4b12      	ldr	r3, [pc, #72]	; (8004900 <xTaskResumeAll+0x130>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048ba:	4b10      	ldr	r3, [pc, #64]	; (80048fc <xTaskResumeAll+0x12c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d009      	beq.n	80048d6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048c2:	2301      	movs	r3, #1
 80048c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <xTaskResumeAll+0x134>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d6:	f000 fbe5 	bl	80050a4 <vPortExitCritical>

	return xAlreadyYielded;
 80048da:	68bb      	ldr	r3, [r7, #8]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200005a4 	.word	0x200005a4
 80048e8:	2000057c 	.word	0x2000057c
 80048ec:	2000053c 	.word	0x2000053c
 80048f0:	20000584 	.word	0x20000584
 80048f4:	20000480 	.word	0x20000480
 80048f8:	2000047c 	.word	0x2000047c
 80048fc:	20000590 	.word	0x20000590
 8004900:	2000058c 	.word	0x2000058c
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004912:	4b4e      	ldr	r3, [pc, #312]	; (8004a4c <xTaskIncrementTick+0x144>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	f040 808e 	bne.w	8004a38 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <xTaskIncrementTick+0x148>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004924:	4a4a      	ldr	r2, [pc, #296]	; (8004a50 <xTaskIncrementTick+0x148>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d120      	bne.n	8004972 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004930:	4b48      	ldr	r3, [pc, #288]	; (8004a54 <xTaskIncrementTick+0x14c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <xTaskIncrementTick+0x48>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xTaskIncrementTick+0x46>
 8004950:	4b40      	ldr	r3, [pc, #256]	; (8004a54 <xTaskIncrementTick+0x14c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	4b40      	ldr	r3, [pc, #256]	; (8004a58 <xTaskIncrementTick+0x150>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <xTaskIncrementTick+0x14c>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4a3e      	ldr	r2, [pc, #248]	; (8004a58 <xTaskIncrementTick+0x150>)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <xTaskIncrementTick+0x154>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3301      	adds	r3, #1
 800496a:	4a3c      	ldr	r2, [pc, #240]	; (8004a5c <xTaskIncrementTick+0x154>)
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	f000 f995 	bl	8004c9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004972:	4b3b      	ldr	r3, [pc, #236]	; (8004a60 <xTaskIncrementTick+0x158>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	429a      	cmp	r2, r3
 800497a:	d348      	bcc.n	8004a0e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800497c:	4b35      	ldr	r3, [pc, #212]	; (8004a54 <xTaskIncrementTick+0x14c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d104      	bne.n	8004990 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004986:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <xTaskIncrementTick+0x158>)
 8004988:	f04f 32ff 	mov.w	r2, #4294967295
 800498c:	601a      	str	r2, [r3, #0]
					break;
 800498e:	e03e      	b.n	8004a0e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <xTaskIncrementTick+0x14c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d203      	bcs.n	80049b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049a8:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <xTaskIncrementTick+0x158>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049ae:	e02e      	b.n	8004a0e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fcac 	bl	8004312 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	3318      	adds	r3, #24
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fca3 	bl	8004312 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2201      	movs	r2, #1
 80049d2:	409a      	lsls	r2, r3
 80049d4:	4b23      	ldr	r3, [pc, #140]	; (8004a64 <xTaskIncrementTick+0x15c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	4a22      	ldr	r2, [pc, #136]	; (8004a64 <xTaskIncrementTick+0x15c>)
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4613      	mov	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <xTaskIncrementTick+0x160>)
 80049ec:	441a      	add	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3304      	adds	r3, #4
 80049f2:	4619      	mov	r1, r3
 80049f4:	4610      	mov	r0, r2
 80049f6:	f7ff fc2f 	bl	8004258 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fe:	4b1b      	ldr	r3, [pc, #108]	; (8004a6c <xTaskIncrementTick+0x164>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d3b9      	bcc.n	800497c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a0c:	e7b6      	b.n	800497c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a0e:	4b17      	ldr	r3, [pc, #92]	; (8004a6c <xTaskIncrementTick+0x164>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a14:	4914      	ldr	r1, [pc, #80]	; (8004a68 <xTaskIncrementTick+0x160>)
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d901      	bls.n	8004a2a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <xTaskIncrementTick+0x168>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d007      	beq.n	8004a42 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a32:	2301      	movs	r3, #1
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	e004      	b.n	8004a42 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <xTaskIncrementTick+0x16c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	4a0d      	ldr	r2, [pc, #52]	; (8004a74 <xTaskIncrementTick+0x16c>)
 8004a40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a42:	697b      	ldr	r3, [r7, #20]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200005a4 	.word	0x200005a4
 8004a50:	20000580 	.word	0x20000580
 8004a54:	20000534 	.word	0x20000534
 8004a58:	20000538 	.word	0x20000538
 8004a5c:	20000594 	.word	0x20000594
 8004a60:	2000059c 	.word	0x2000059c
 8004a64:	20000584 	.word	0x20000584
 8004a68:	20000480 	.word	0x20000480
 8004a6c:	2000047c 	.word	0x2000047c
 8004a70:	20000590 	.word	0x20000590
 8004a74:	2000058c 	.word	0x2000058c

08004a78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a7e:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <vTaskSwitchContext+0xa4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a86:	4b26      	ldr	r3, [pc, #152]	; (8004b20 <vTaskSwitchContext+0xa8>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a8c:	e03f      	b.n	8004b0e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004a8e:	4b24      	ldr	r3, [pc, #144]	; (8004b20 <vTaskSwitchContext+0xa8>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	4b23      	ldr	r3, [pc, #140]	; (8004b24 <vTaskSwitchContext+0xac>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	f1c3 031f 	rsb	r3, r3, #31
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	491f      	ldr	r1, [pc, #124]	; (8004b28 <vTaskSwitchContext+0xb0>)
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	607b      	str	r3, [r7, #4]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <vTaskSwitchContext+0x5a>
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <vTaskSwitchContext+0xb0>)
 8004ae0:	4413      	add	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	3308      	adds	r3, #8
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d104      	bne.n	8004b04 <vTaskSwitchContext+0x8c>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	4a08      	ldr	r2, [pc, #32]	; (8004b2c <vTaskSwitchContext+0xb4>)
 8004b0c:	6013      	str	r3, [r2, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	200005a4 	.word	0x200005a4
 8004b20:	20000590 	.word	0x20000590
 8004b24:	20000584 	.word	0x20000584
 8004b28:	20000480 	.word	0x20000480
 8004b2c:	2000047c 	.word	0x2000047c

08004b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b38:	f000 f852 	bl	8004be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b3c:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <prvIdleTask+0x28>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d9f9      	bls.n	8004b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <prvIdleTask+0x2c>)
 8004b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b54:	e7f0      	b.n	8004b38 <prvIdleTask+0x8>
 8004b56:	bf00      	nop
 8004b58:	20000480 	.word	0x20000480
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	607b      	str	r3, [r7, #4]
 8004b6a:	e00c      	b.n	8004b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <prvInitialiseTaskLists+0x60>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb3f 	bl	80041fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3301      	adds	r3, #1
 8004b84:	607b      	str	r3, [r7, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b06      	cmp	r3, #6
 8004b8a:	d9ef      	bls.n	8004b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004b8e:	f7ff fb36 	bl	80041fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004b94:	f7ff fb33 	bl	80041fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b98:	480c      	ldr	r0, [pc, #48]	; (8004bcc <prvInitialiseTaskLists+0x6c>)
 8004b9a:	f7ff fb30 	bl	80041fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b9e:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <prvInitialiseTaskLists+0x70>)
 8004ba0:	f7ff fb2d 	bl	80041fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ba4:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <prvInitialiseTaskLists+0x74>)
 8004ba6:	f7ff fb2a 	bl	80041fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004baa:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <prvInitialiseTaskLists+0x78>)
 8004bac:	4a05      	ldr	r2, [pc, #20]	; (8004bc4 <prvInitialiseTaskLists+0x64>)
 8004bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bb0:	4b0a      	ldr	r3, [pc, #40]	; (8004bdc <prvInitialiseTaskLists+0x7c>)
 8004bb2:	4a05      	ldr	r2, [pc, #20]	; (8004bc8 <prvInitialiseTaskLists+0x68>)
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000480 	.word	0x20000480
 8004bc4:	2000050c 	.word	0x2000050c
 8004bc8:	20000520 	.word	0x20000520
 8004bcc:	2000053c 	.word	0x2000053c
 8004bd0:	20000550 	.word	0x20000550
 8004bd4:	20000568 	.word	0x20000568
 8004bd8:	20000534 	.word	0x20000534
 8004bdc:	20000538 	.word	0x20000538

08004be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be6:	e019      	b.n	8004c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004be8:	f000 fa2c 	bl	8005044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <prvCheckTasksWaitingTermination+0x50>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fb8a 	bl	8004312 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bfe:	4b0d      	ldr	r3, [pc, #52]	; (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <prvCheckTasksWaitingTermination+0x54>)
 8004c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c12:	f000 fa47 	bl	80050a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f810 	bl	8004c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c1c:	4b06      	ldr	r3, [pc, #24]	; (8004c38 <prvCheckTasksWaitingTermination+0x58>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1e1      	bne.n	8004be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000550 	.word	0x20000550
 8004c34:	2000057c 	.word	0x2000057c
 8004c38:	20000564 	.word	0x20000564

08004c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d108      	bne.n	8004c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fba4 	bl	80053a0 <vPortFree>
				vPortFree( pxTCB );
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fba1 	bl	80053a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c5e:	e018      	b.n	8004c92 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d103      	bne.n	8004c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fb98 	bl	80053a0 <vPortFree>
	}
 8004c70:	e00f      	b.n	8004c92 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d00a      	beq.n	8004c92 <prvDeleteTCB+0x56>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	60fb      	str	r3, [r7, #12]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <prvDeleteTCB+0x54>
	}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca2:	4b0c      	ldr	r3, [pc, #48]	; (8004cd4 <prvResetNextTaskUnblockTime+0x38>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cac:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cb4:	e008      	b.n	8004cc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <prvResetNextTaskUnblockTime+0x38>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvResetNextTaskUnblockTime+0x3c>)
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	20000534 	.word	0x20000534
 8004cd8:	2000059c 	.word	0x2000059c

08004cdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ce2:	4b0b      	ldr	r3, [pc, #44]	; (8004d10 <xTaskGetSchedulerState+0x34>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cea:	2301      	movs	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	e008      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <xTaskGetSchedulerState+0x38>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	607b      	str	r3, [r7, #4]
 8004cfc:	e001      	b.n	8004d02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d02:	687b      	ldr	r3, [r7, #4]
	}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000588 	.word	0x20000588
 8004d14:	200005a4 	.word	0x200005a4

08004d18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d22:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d28:	4b28      	ldr	r3, [pc, #160]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff faef 	bl	8004312 <uxListRemove>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10b      	bne.n	8004d52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004d3a:	4b24      	ldr	r3, [pc, #144]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	2201      	movs	r2, #1
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	43da      	mvns	r2, r3
 8004d48:	4b21      	ldr	r3, [pc, #132]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	4a20      	ldr	r2, [pc, #128]	; (8004dd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004d50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d10a      	bne.n	8004d70 <prvAddCurrentTaskToDelayedList+0x58>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d007      	beq.n	8004d70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d60:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	481a      	ldr	r0, [pc, #104]	; (8004dd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004d6a:	f7ff fa75 	bl	8004258 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d6e:	e026      	b.n	8004dbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d78:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d209      	bcs.n	8004d9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7ff fa83 	bl	80042a0 <vListInsert>
}
 8004d9a:	e010      	b.n	8004dbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d9c:	4b0f      	ldr	r3, [pc, #60]	; (8004ddc <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3304      	adds	r3, #4
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f7ff fa79 	bl	80042a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d202      	bcs.n	8004dbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6013      	str	r3, [r2, #0]
}
 8004dbe:	bf00      	nop
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20000580 	.word	0x20000580
 8004dcc:	2000047c 	.word	0x2000047c
 8004dd0:	20000584 	.word	0x20000584
 8004dd4:	20000568 	.word	0x20000568
 8004dd8:	20000538 	.word	0x20000538
 8004ddc:	20000534 	.word	0x20000534
 8004de0:	2000059c 	.word	0x2000059c

08004de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3b04      	subs	r3, #4
 8004df4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b04      	subs	r3, #4
 8004e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f023 0201 	bic.w	r2, r3, #1
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b04      	subs	r3, #4
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <pxPortInitialiseStack+0x64>)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b14      	subs	r3, #20
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	3b04      	subs	r3, #4
 8004e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f06f 0202 	mvn.w	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3b20      	subs	r3, #32
 8004e38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	08004e4d 	.word	0x08004e4d

08004e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <prvTaskExitError+0x54>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5e:	d00a      	beq.n	8004e76 <prvTaskExitError+0x2a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <prvTaskExitError+0x28>
	__asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	60bb      	str	r3, [r7, #8]
}
 8004e88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e8a:	bf00      	nop
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d0fc      	beq.n	8004e8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e92:	bf00      	nop
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	2000000c 	.word	0x2000000c
	...

08004eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <pxCurrentTCBConst2>)
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	6808      	ldr	r0, [r1, #0]
 8004eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eba:	f380 8809 	msr	PSP, r0
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 8004eca:	4770      	bx	lr
 8004ecc:	f3af 8000 	nop.w

08004ed0 <pxCurrentTCBConst2>:
 8004ed0:	2000047c 	.word	0x2000047c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ed8:	4808      	ldr	r0, [pc, #32]	; (8004efc <prvPortStartFirstTask+0x24>)
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	6800      	ldr	r0, [r0, #0]
 8004ede:	f380 8808 	msr	MSP, r0
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f380 8814 	msr	CONTROL, r0
 8004eea:	b662      	cpsie	i
 8004eec:	b661      	cpsie	f
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	df00      	svc	0
 8004ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004efa:	bf00      	nop
 8004efc:	e000ed08 	.word	0xe000ed08

08004f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	; (8005024 <xPortStartScheduler+0x124>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x26>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <xPortStartScheduler+0x120>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <xPortStartScheduler+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10a      	bne.n	8004f46 <xPortStartScheduler+0x46>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f46:	4b39      	ldr	r3, [pc, #228]	; (800502c <xPortStartScheduler+0x12c>)
 8004f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	22ff      	movs	r2, #255	; 0xff
 8004f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b31      	ldr	r3, [pc, #196]	; (8005030 <xPortStartScheduler+0x130>)
 8004f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <xPortStartScheduler+0x134>)
 8004f70:	2207      	movs	r2, #7
 8004f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f74:	e009      	b.n	8004f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <xPortStartScheduler+0x134>)
 8004f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f80:	78fb      	ldrb	r3, [r7, #3]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f8a:	78fb      	ldrb	r3, [r7, #3]
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b80      	cmp	r3, #128	; 0x80
 8004f94:	d0ef      	beq.n	8004f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <xPortStartScheduler+0x134>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1c3 0307 	rsb	r3, r3, #7
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00a      	beq.n	8004fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	60bb      	str	r3, [r7, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <xPortStartScheduler+0x134>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <xPortStartScheduler+0x134>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <xPortStartScheduler+0x134>)
 8004fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fd6:	4b18      	ldr	r3, [pc, #96]	; (8005038 <xPortStartScheduler+0x138>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a17      	ldr	r2, [pc, #92]	; (8005038 <xPortStartScheduler+0x138>)
 8004fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <xPortStartScheduler+0x138>)
 8004fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fee:	f000 f8dd 	bl	80051ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ff2:	4b12      	ldr	r3, [pc, #72]	; (800503c <xPortStartScheduler+0x13c>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ff8:	f000 f8fc 	bl	80051f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ffc:	4b10      	ldr	r3, [pc, #64]	; (8005040 <xPortStartScheduler+0x140>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <xPortStartScheduler+0x140>)
 8005002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005008:	f7ff ff66 	bl	8004ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800500c:	f7ff fd34 	bl	8004a78 <vTaskSwitchContext>
	prvTaskExitError();
 8005010:	f7ff ff1c 	bl	8004e4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	e000ed00 	.word	0xe000ed00
 8005024:	410fc271 	.word	0x410fc271
 8005028:	410fc270 	.word	0x410fc270
 800502c:	e000e400 	.word	0xe000e400
 8005030:	200005a8 	.word	0x200005a8
 8005034:	200005ac 	.word	0x200005ac
 8005038:	e000ed20 	.word	0xe000ed20
 800503c:	2000000c 	.word	0x2000000c
 8005040:	e000ef34 	.word	0xe000ef34

08005044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <vPortEnterCritical+0x58>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0d      	ldr	r2, [pc, #52]	; (800509c <vPortEnterCritical+0x58>)
 8005066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <vPortEnterCritical+0x58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10f      	bne.n	8005090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortEnterCritical+0x5c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00a      	beq.n	8005090 <vPortEnterCritical+0x4c>
	__asm volatile
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	603b      	str	r3, [r7, #0]
}
 800508c:	bf00      	nop
 800508e:	e7fe      	b.n	800508e <vPortEnterCritical+0x4a>
	}
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	e000ed04 	.word	0xe000ed04

080050a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <vPortExitCritical+0x50>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <vPortExitCritical+0x24>
	__asm volatile
 80050b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b6:	f383 8811 	msr	BASEPRI, r3
 80050ba:	f3bf 8f6f 	isb	sy
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	607b      	str	r3, [r7, #4]
}
 80050c4:	bf00      	nop
 80050c6:	e7fe      	b.n	80050c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <vPortExitCritical+0x50>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4a09      	ldr	r2, [pc, #36]	; (80050f4 <vPortExitCritical+0x50>)
 80050d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050d2:	4b08      	ldr	r3, [pc, #32]	; (80050f4 <vPortExitCritical+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d105      	bne.n	80050e6 <vPortExitCritical+0x42>
 80050da:	2300      	movs	r3, #0
 80050dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
	...

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b15      	ldr	r3, [pc, #84]	; (8005160 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f01e 0f10 	tst.w	lr, #16
 8005110:	bf08      	it	eq
 8005112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005124:	f380 8811 	msr	BASEPRI, r0
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f7ff fca2 	bl	8004a78 <vTaskSwitchContext>
 8005134:	f04f 0000 	mov.w	r0, #0
 8005138:	f380 8811 	msr	BASEPRI, r0
 800513c:	bc09      	pop	{r0, r3}
 800513e:	6819      	ldr	r1, [r3, #0]
 8005140:	6808      	ldr	r0, [r1, #0]
 8005142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005146:	f01e 0f10 	tst.w	lr, #16
 800514a:	bf08      	it	eq
 800514c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005150:	f380 8809 	msr	PSP, r0
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w

08005160 <pxCurrentTCBConst>:
 8005160:	2000047c 	.word	0x2000047c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop

08005168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005182:	f7ff fbc1 	bl	8004908 <xTaskIncrementTick>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800518c:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <xPortSysTickHandler+0x40>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	2300      	movs	r3, #0
 8005196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051b0:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortSetupTimerInterrupt+0x38>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <vPortSetupTimerInterrupt+0x3c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <vPortSetupTimerInterrupt+0x40>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <vPortSetupTimerInterrupt+0x44>)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ce:	4b04      	ldr	r3, [pc, #16]	; (80051e0 <vPortSetupTimerInterrupt+0x34>)
 80051d0:	2207      	movs	r2, #7
 80051d2:	601a      	str	r2, [r3, #0]
}
 80051d4:	bf00      	nop
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e010 	.word	0xe000e010
 80051e4:	e000e018 	.word	0xe000e018
 80051e8:	20000000 	.word	0x20000000
 80051ec:	10624dd3 	.word	0x10624dd3
 80051f0:	e000e014 	.word	0xe000e014

080051f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005204 <vPortEnableVFP+0x10>
 80051f8:	6801      	ldr	r1, [r0, #0]
 80051fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051fe:	6001      	str	r1, [r0, #0]
 8005200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005202:	bf00      	nop
 8005204:	e000ed88 	.word	0xe000ed88

08005208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005214:	f7ff face 	bl	80047b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005218:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <pvPortMalloc+0x180>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005220:	f000 f920 	bl	8005464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005224:	4b59      	ldr	r3, [pc, #356]	; (800538c <pvPortMalloc+0x184>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 8093 	bne.w	8005358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d01d      	beq.n	8005274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005238:	2208      	movs	r2, #8
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d014      	beq.n	8005274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f023 0307 	bic.w	r3, r3, #7
 8005250:	3308      	adds	r3, #8
 8005252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00a      	beq.n	8005274 <pvPortMalloc+0x6c>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	617b      	str	r3, [r7, #20]
}
 8005270:	bf00      	nop
 8005272:	e7fe      	b.n	8005272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d06e      	beq.n	8005358 <pvPortMalloc+0x150>
 800527a:	4b45      	ldr	r3, [pc, #276]	; (8005390 <pvPortMalloc+0x188>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	d869      	bhi.n	8005358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005284:	4b43      	ldr	r3, [pc, #268]	; (8005394 <pvPortMalloc+0x18c>)
 8005286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005288:	4b42      	ldr	r3, [pc, #264]	; (8005394 <pvPortMalloc+0x18c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800528e:	e004      	b.n	800529a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d903      	bls.n	80052ac <pvPortMalloc+0xa4>
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f1      	bne.n	8005290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052ac:	4b36      	ldr	r3, [pc, #216]	; (8005388 <pvPortMalloc+0x180>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d050      	beq.n	8005358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2208      	movs	r2, #8
 80052bc:	4413      	add	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	2308      	movs	r3, #8
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d91f      	bls.n	8005318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <pvPortMalloc+0xf8>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	613b      	str	r3, [r7, #16]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	1ad2      	subs	r2, r2, r3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005312:	69b8      	ldr	r0, [r7, #24]
 8005314:	f000 f908 	bl	8005528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <pvPortMalloc+0x188>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <pvPortMalloc+0x188>)
 8005324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <pvPortMalloc+0x188>)
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	4b1b      	ldr	r3, [pc, #108]	; (8005398 <pvPortMalloc+0x190>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d203      	bcs.n	800533a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <pvPortMalloc+0x188>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	; (8005398 <pvPortMalloc+0x190>)
 8005338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	4b13      	ldr	r3, [pc, #76]	; (800538c <pvPortMalloc+0x184>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	431a      	orrs	r2, r3
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800534e:	4b13      	ldr	r3, [pc, #76]	; (800539c <pvPortMalloc+0x194>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3301      	adds	r3, #1
 8005354:	4a11      	ldr	r2, [pc, #68]	; (800539c <pvPortMalloc+0x194>)
 8005356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005358:	f7ff fa3a 	bl	80047d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <pvPortMalloc+0x174>
	__asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	60fb      	str	r3, [r7, #12]
}
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <pvPortMalloc+0x172>
	return pvReturn;
 800537c:	69fb      	ldr	r3, [r7, #28]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3728      	adds	r7, #40	; 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200041b8 	.word	0x200041b8
 800538c:	200041cc 	.word	0x200041cc
 8005390:	200041bc 	.word	0x200041bc
 8005394:	200041b0 	.word	0x200041b0
 8005398:	200041c0 	.word	0x200041c0
 800539c:	200041c4 	.word	0x200041c4

080053a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d04d      	beq.n	800544e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053b2:	2308      	movs	r3, #8
 80053b4:	425b      	negs	r3, r3
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4413      	add	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	4b24      	ldr	r3, [pc, #144]	; (8005458 <vPortFree+0xb8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4013      	ands	r3, r2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <vPortFree+0x44>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60fb      	str	r3, [r7, #12]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <vPortFree+0x62>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	60bb      	str	r3, [r7, #8]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <vPortFree+0xb8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01e      	beq.n	800544e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d11a      	bne.n	800544e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <vPortFree+0xb8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	43db      	mvns	r3, r3
 8005422:	401a      	ands	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005428:	f7ff f9c4 	bl	80047b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <vPortFree+0xbc>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4413      	add	r3, r2
 8005436:	4a09      	ldr	r2, [pc, #36]	; (800545c <vPortFree+0xbc>)
 8005438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800543a:	6938      	ldr	r0, [r7, #16]
 800543c:	f000 f874 	bl	8005528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <vPortFree+0xc0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	4a06      	ldr	r2, [pc, #24]	; (8005460 <vPortFree+0xc0>)
 8005448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800544a:	f7ff f9c1 	bl	80047d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800544e:	bf00      	nop
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	200041cc 	.word	0x200041cc
 800545c:	200041bc 	.word	0x200041bc
 8005460:	200041c8 	.word	0x200041c8

08005464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800546a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800546e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005470:	4b27      	ldr	r3, [pc, #156]	; (8005510 <prvHeapInit+0xac>)
 8005472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3307      	adds	r3, #7
 8005482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	4a1f      	ldr	r2, [pc, #124]	; (8005510 <prvHeapInit+0xac>)
 8005494:	4413      	add	r3, r2
 8005496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <prvHeapInit+0xb0>)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <prvHeapInit+0xb0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	4413      	add	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054b0:	2208      	movs	r2, #8
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0307 	bic.w	r3, r3, #7
 80054be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a15      	ldr	r2, [pc, #84]	; (8005518 <prvHeapInit+0xb4>)
 80054c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvHeapInit+0xb4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2200      	movs	r2, #0
 80054cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <prvHeapInit+0xb4>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	1ad2      	subs	r2, r2, r3
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054e4:	4b0c      	ldr	r3, [pc, #48]	; (8005518 <prvHeapInit+0xb4>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	; (800551c <prvHeapInit+0xb8>)
 80054f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	4a09      	ldr	r2, [pc, #36]	; (8005520 <prvHeapInit+0xbc>)
 80054fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054fc:	4b09      	ldr	r3, [pc, #36]	; (8005524 <prvHeapInit+0xc0>)
 80054fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	3714      	adds	r7, #20
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	200005b0 	.word	0x200005b0
 8005514:	200041b0 	.word	0x200041b0
 8005518:	200041b8 	.word	0x200041b8
 800551c:	200041c0 	.word	0x200041c0
 8005520:	200041bc 	.word	0x200041bc
 8005524:	200041cc 	.word	0x200041cc

08005528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005530:	4b28      	ldr	r3, [pc, #160]	; (80055d4 <prvInsertBlockIntoFreeList+0xac>)
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e002      	b.n	800553c <prvInsertBlockIntoFreeList+0x14>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	429a      	cmp	r2, r3
 8005544:	d8f7      	bhi.n	8005536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4413      	add	r3, r2
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d108      	bne.n	800556a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	441a      	add	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	441a      	add	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d118      	bne.n	80055b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <prvInsertBlockIntoFreeList+0xb0>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d00d      	beq.n	80055a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e008      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055a6:	4b0c      	ldr	r3, [pc, #48]	; (80055d8 <prvInsertBlockIntoFreeList+0xb0>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e003      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d002      	beq.n	80055c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	200041b0 	.word	0x200041b0
 80055d8:	200041b8 	.word	0x200041b8

080055dc <__errno>:
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <__errno+0x8>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000010 	.word	0x20000010

080055e8 <__libc_init_array>:
 80055e8:	b570      	push	{r4, r5, r6, lr}
 80055ea:	4d0d      	ldr	r5, [pc, #52]	; (8005620 <__libc_init_array+0x38>)
 80055ec:	4c0d      	ldr	r4, [pc, #52]	; (8005624 <__libc_init_array+0x3c>)
 80055ee:	1b64      	subs	r4, r4, r5
 80055f0:	10a4      	asrs	r4, r4, #2
 80055f2:	2600      	movs	r6, #0
 80055f4:	42a6      	cmp	r6, r4
 80055f6:	d109      	bne.n	800560c <__libc_init_array+0x24>
 80055f8:	4d0b      	ldr	r5, [pc, #44]	; (8005628 <__libc_init_array+0x40>)
 80055fa:	4c0c      	ldr	r4, [pc, #48]	; (800562c <__libc_init_array+0x44>)
 80055fc:	f000 fc8e 	bl	8005f1c <_init>
 8005600:	1b64      	subs	r4, r4, r5
 8005602:	10a4      	asrs	r4, r4, #2
 8005604:	2600      	movs	r6, #0
 8005606:	42a6      	cmp	r6, r4
 8005608:	d105      	bne.n	8005616 <__libc_init_array+0x2e>
 800560a:	bd70      	pop	{r4, r5, r6, pc}
 800560c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005610:	4798      	blx	r3
 8005612:	3601      	adds	r6, #1
 8005614:	e7ee      	b.n	80055f4 <__libc_init_array+0xc>
 8005616:	f855 3b04 	ldr.w	r3, [r5], #4
 800561a:	4798      	blx	r3
 800561c:	3601      	adds	r6, #1
 800561e:	e7f2      	b.n	8005606 <__libc_init_array+0x1e>
 8005620:	0800601c 	.word	0x0800601c
 8005624:	0800601c 	.word	0x0800601c
 8005628:	0800601c 	.word	0x0800601c
 800562c:	08006020 	.word	0x08006020

08005630 <memcpy>:
 8005630:	440a      	add	r2, r1
 8005632:	4291      	cmp	r1, r2
 8005634:	f100 33ff 	add.w	r3, r0, #4294967295
 8005638:	d100      	bne.n	800563c <memcpy+0xc>
 800563a:	4770      	bx	lr
 800563c:	b510      	push	{r4, lr}
 800563e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005646:	4291      	cmp	r1, r2
 8005648:	d1f9      	bne.n	800563e <memcpy+0xe>
 800564a:	bd10      	pop	{r4, pc}

0800564c <memset>:
 800564c:	4402      	add	r2, r0
 800564e:	4603      	mov	r3, r0
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	f803 1b01 	strb.w	r1, [r3], #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <siprintf>:
 800565c:	b40e      	push	{r1, r2, r3}
 800565e:	b500      	push	{lr}
 8005660:	b09c      	sub	sp, #112	; 0x70
 8005662:	ab1d      	add	r3, sp, #116	; 0x74
 8005664:	9002      	str	r0, [sp, #8]
 8005666:	9006      	str	r0, [sp, #24]
 8005668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800566c:	4809      	ldr	r0, [pc, #36]	; (8005694 <siprintf+0x38>)
 800566e:	9107      	str	r1, [sp, #28]
 8005670:	9104      	str	r1, [sp, #16]
 8005672:	4909      	ldr	r1, [pc, #36]	; (8005698 <siprintf+0x3c>)
 8005674:	f853 2b04 	ldr.w	r2, [r3], #4
 8005678:	9105      	str	r1, [sp, #20]
 800567a:	6800      	ldr	r0, [r0, #0]
 800567c:	9301      	str	r3, [sp, #4]
 800567e:	a902      	add	r1, sp, #8
 8005680:	f000 f868 	bl	8005754 <_svfiprintf_r>
 8005684:	9b02      	ldr	r3, [sp, #8]
 8005686:	2200      	movs	r2, #0
 8005688:	701a      	strb	r2, [r3, #0]
 800568a:	b01c      	add	sp, #112	; 0x70
 800568c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005690:	b003      	add	sp, #12
 8005692:	4770      	bx	lr
 8005694:	20000010 	.word	0x20000010
 8005698:	ffff0208 	.word	0xffff0208

0800569c <__ssputs_r>:
 800569c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a0:	688e      	ldr	r6, [r1, #8]
 80056a2:	429e      	cmp	r6, r3
 80056a4:	4682      	mov	sl, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	4690      	mov	r8, r2
 80056aa:	461f      	mov	r7, r3
 80056ac:	d838      	bhi.n	8005720 <__ssputs_r+0x84>
 80056ae:	898a      	ldrh	r2, [r1, #12]
 80056b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056b4:	d032      	beq.n	800571c <__ssputs_r+0x80>
 80056b6:	6825      	ldr	r5, [r4, #0]
 80056b8:	6909      	ldr	r1, [r1, #16]
 80056ba:	eba5 0901 	sub.w	r9, r5, r1
 80056be:	6965      	ldr	r5, [r4, #20]
 80056c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c8:	3301      	adds	r3, #1
 80056ca:	444b      	add	r3, r9
 80056cc:	106d      	asrs	r5, r5, #1
 80056ce:	429d      	cmp	r5, r3
 80056d0:	bf38      	it	cc
 80056d2:	461d      	movcc	r5, r3
 80056d4:	0553      	lsls	r3, r2, #21
 80056d6:	d531      	bpl.n	800573c <__ssputs_r+0xa0>
 80056d8:	4629      	mov	r1, r5
 80056da:	f000 fb55 	bl	8005d88 <_malloc_r>
 80056de:	4606      	mov	r6, r0
 80056e0:	b950      	cbnz	r0, 80056f8 <__ssputs_r+0x5c>
 80056e2:	230c      	movs	r3, #12
 80056e4:	f8ca 3000 	str.w	r3, [sl]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ee:	81a3      	strh	r3, [r4, #12]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f8:	6921      	ldr	r1, [r4, #16]
 80056fa:	464a      	mov	r2, r9
 80056fc:	f7ff ff98 	bl	8005630 <memcpy>
 8005700:	89a3      	ldrh	r3, [r4, #12]
 8005702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570a:	81a3      	strh	r3, [r4, #12]
 800570c:	6126      	str	r6, [r4, #16]
 800570e:	6165      	str	r5, [r4, #20]
 8005710:	444e      	add	r6, r9
 8005712:	eba5 0509 	sub.w	r5, r5, r9
 8005716:	6026      	str	r6, [r4, #0]
 8005718:	60a5      	str	r5, [r4, #8]
 800571a:	463e      	mov	r6, r7
 800571c:	42be      	cmp	r6, r7
 800571e:	d900      	bls.n	8005722 <__ssputs_r+0x86>
 8005720:	463e      	mov	r6, r7
 8005722:	6820      	ldr	r0, [r4, #0]
 8005724:	4632      	mov	r2, r6
 8005726:	4641      	mov	r1, r8
 8005728:	f000 faa8 	bl	8005c7c <memmove>
 800572c:	68a3      	ldr	r3, [r4, #8]
 800572e:	1b9b      	subs	r3, r3, r6
 8005730:	60a3      	str	r3, [r4, #8]
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	4433      	add	r3, r6
 8005736:	6023      	str	r3, [r4, #0]
 8005738:	2000      	movs	r0, #0
 800573a:	e7db      	b.n	80056f4 <__ssputs_r+0x58>
 800573c:	462a      	mov	r2, r5
 800573e:	f000 fb97 	bl	8005e70 <_realloc_r>
 8005742:	4606      	mov	r6, r0
 8005744:	2800      	cmp	r0, #0
 8005746:	d1e1      	bne.n	800570c <__ssputs_r+0x70>
 8005748:	6921      	ldr	r1, [r4, #16]
 800574a:	4650      	mov	r0, sl
 800574c:	f000 fab0 	bl	8005cb0 <_free_r>
 8005750:	e7c7      	b.n	80056e2 <__ssputs_r+0x46>
	...

08005754 <_svfiprintf_r>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4698      	mov	r8, r3
 800575a:	898b      	ldrh	r3, [r1, #12]
 800575c:	061b      	lsls	r3, r3, #24
 800575e:	b09d      	sub	sp, #116	; 0x74
 8005760:	4607      	mov	r7, r0
 8005762:	460d      	mov	r5, r1
 8005764:	4614      	mov	r4, r2
 8005766:	d50e      	bpl.n	8005786 <_svfiprintf_r+0x32>
 8005768:	690b      	ldr	r3, [r1, #16]
 800576a:	b963      	cbnz	r3, 8005786 <_svfiprintf_r+0x32>
 800576c:	2140      	movs	r1, #64	; 0x40
 800576e:	f000 fb0b 	bl	8005d88 <_malloc_r>
 8005772:	6028      	str	r0, [r5, #0]
 8005774:	6128      	str	r0, [r5, #16]
 8005776:	b920      	cbnz	r0, 8005782 <_svfiprintf_r+0x2e>
 8005778:	230c      	movs	r3, #12
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	e0d1      	b.n	8005926 <_svfiprintf_r+0x1d2>
 8005782:	2340      	movs	r3, #64	; 0x40
 8005784:	616b      	str	r3, [r5, #20]
 8005786:	2300      	movs	r3, #0
 8005788:	9309      	str	r3, [sp, #36]	; 0x24
 800578a:	2320      	movs	r3, #32
 800578c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005790:	f8cd 800c 	str.w	r8, [sp, #12]
 8005794:	2330      	movs	r3, #48	; 0x30
 8005796:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005940 <_svfiprintf_r+0x1ec>
 800579a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800579e:	f04f 0901 	mov.w	r9, #1
 80057a2:	4623      	mov	r3, r4
 80057a4:	469a      	mov	sl, r3
 80057a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057aa:	b10a      	cbz	r2, 80057b0 <_svfiprintf_r+0x5c>
 80057ac:	2a25      	cmp	r2, #37	; 0x25
 80057ae:	d1f9      	bne.n	80057a4 <_svfiprintf_r+0x50>
 80057b0:	ebba 0b04 	subs.w	fp, sl, r4
 80057b4:	d00b      	beq.n	80057ce <_svfiprintf_r+0x7a>
 80057b6:	465b      	mov	r3, fp
 80057b8:	4622      	mov	r2, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	4638      	mov	r0, r7
 80057be:	f7ff ff6d 	bl	800569c <__ssputs_r>
 80057c2:	3001      	adds	r0, #1
 80057c4:	f000 80aa 	beq.w	800591c <_svfiprintf_r+0x1c8>
 80057c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ca:	445a      	add	r2, fp
 80057cc:	9209      	str	r2, [sp, #36]	; 0x24
 80057ce:	f89a 3000 	ldrb.w	r3, [sl]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80a2 	beq.w	800591c <_svfiprintf_r+0x1c8>
 80057d8:	2300      	movs	r3, #0
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e2:	f10a 0a01 	add.w	sl, sl, #1
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	9307      	str	r3, [sp, #28]
 80057ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ee:	931a      	str	r3, [sp, #104]	; 0x68
 80057f0:	4654      	mov	r4, sl
 80057f2:	2205      	movs	r2, #5
 80057f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f8:	4851      	ldr	r0, [pc, #324]	; (8005940 <_svfiprintf_r+0x1ec>)
 80057fa:	f7fa fcf9 	bl	80001f0 <memchr>
 80057fe:	9a04      	ldr	r2, [sp, #16]
 8005800:	b9d8      	cbnz	r0, 800583a <_svfiprintf_r+0xe6>
 8005802:	06d0      	lsls	r0, r2, #27
 8005804:	bf44      	itt	mi
 8005806:	2320      	movmi	r3, #32
 8005808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800580c:	0711      	lsls	r1, r2, #28
 800580e:	bf44      	itt	mi
 8005810:	232b      	movmi	r3, #43	; 0x2b
 8005812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005816:	f89a 3000 	ldrb.w	r3, [sl]
 800581a:	2b2a      	cmp	r3, #42	; 0x2a
 800581c:	d015      	beq.n	800584a <_svfiprintf_r+0xf6>
 800581e:	9a07      	ldr	r2, [sp, #28]
 8005820:	4654      	mov	r4, sl
 8005822:	2000      	movs	r0, #0
 8005824:	f04f 0c0a 	mov.w	ip, #10
 8005828:	4621      	mov	r1, r4
 800582a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582e:	3b30      	subs	r3, #48	; 0x30
 8005830:	2b09      	cmp	r3, #9
 8005832:	d94e      	bls.n	80058d2 <_svfiprintf_r+0x17e>
 8005834:	b1b0      	cbz	r0, 8005864 <_svfiprintf_r+0x110>
 8005836:	9207      	str	r2, [sp, #28]
 8005838:	e014      	b.n	8005864 <_svfiprintf_r+0x110>
 800583a:	eba0 0308 	sub.w	r3, r0, r8
 800583e:	fa09 f303 	lsl.w	r3, r9, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	9304      	str	r3, [sp, #16]
 8005846:	46a2      	mov	sl, r4
 8005848:	e7d2      	b.n	80057f0 <_svfiprintf_r+0x9c>
 800584a:	9b03      	ldr	r3, [sp, #12]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	9103      	str	r1, [sp, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	bfbb      	ittet	lt
 8005856:	425b      	neglt	r3, r3
 8005858:	f042 0202 	orrlt.w	r2, r2, #2
 800585c:	9307      	strge	r3, [sp, #28]
 800585e:	9307      	strlt	r3, [sp, #28]
 8005860:	bfb8      	it	lt
 8005862:	9204      	strlt	r2, [sp, #16]
 8005864:	7823      	ldrb	r3, [r4, #0]
 8005866:	2b2e      	cmp	r3, #46	; 0x2e
 8005868:	d10c      	bne.n	8005884 <_svfiprintf_r+0x130>
 800586a:	7863      	ldrb	r3, [r4, #1]
 800586c:	2b2a      	cmp	r3, #42	; 0x2a
 800586e:	d135      	bne.n	80058dc <_svfiprintf_r+0x188>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	9203      	str	r2, [sp, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	bfb8      	it	lt
 800587c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005880:	3402      	adds	r4, #2
 8005882:	9305      	str	r3, [sp, #20]
 8005884:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005950 <_svfiprintf_r+0x1fc>
 8005888:	7821      	ldrb	r1, [r4, #0]
 800588a:	2203      	movs	r2, #3
 800588c:	4650      	mov	r0, sl
 800588e:	f7fa fcaf 	bl	80001f0 <memchr>
 8005892:	b140      	cbz	r0, 80058a6 <_svfiprintf_r+0x152>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	eba0 000a 	sub.w	r0, r0, sl
 800589a:	fa03 f000 	lsl.w	r0, r3, r0
 800589e:	9b04      	ldr	r3, [sp, #16]
 80058a0:	4303      	orrs	r3, r0
 80058a2:	3401      	adds	r4, #1
 80058a4:	9304      	str	r3, [sp, #16]
 80058a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058aa:	4826      	ldr	r0, [pc, #152]	; (8005944 <_svfiprintf_r+0x1f0>)
 80058ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058b0:	2206      	movs	r2, #6
 80058b2:	f7fa fc9d 	bl	80001f0 <memchr>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d038      	beq.n	800592c <_svfiprintf_r+0x1d8>
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <_svfiprintf_r+0x1f4>)
 80058bc:	bb1b      	cbnz	r3, 8005906 <_svfiprintf_r+0x1b2>
 80058be:	9b03      	ldr	r3, [sp, #12]
 80058c0:	3307      	adds	r3, #7
 80058c2:	f023 0307 	bic.w	r3, r3, #7
 80058c6:	3308      	adds	r3, #8
 80058c8:	9303      	str	r3, [sp, #12]
 80058ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058cc:	4433      	add	r3, r6
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	e767      	b.n	80057a2 <_svfiprintf_r+0x4e>
 80058d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d6:	460c      	mov	r4, r1
 80058d8:	2001      	movs	r0, #1
 80058da:	e7a5      	b.n	8005828 <_svfiprintf_r+0xd4>
 80058dc:	2300      	movs	r3, #0
 80058de:	3401      	adds	r4, #1
 80058e0:	9305      	str	r3, [sp, #20]
 80058e2:	4619      	mov	r1, r3
 80058e4:	f04f 0c0a 	mov.w	ip, #10
 80058e8:	4620      	mov	r0, r4
 80058ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ee:	3a30      	subs	r2, #48	; 0x30
 80058f0:	2a09      	cmp	r2, #9
 80058f2:	d903      	bls.n	80058fc <_svfiprintf_r+0x1a8>
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0c5      	beq.n	8005884 <_svfiprintf_r+0x130>
 80058f8:	9105      	str	r1, [sp, #20]
 80058fa:	e7c3      	b.n	8005884 <_svfiprintf_r+0x130>
 80058fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005900:	4604      	mov	r4, r0
 8005902:	2301      	movs	r3, #1
 8005904:	e7f0      	b.n	80058e8 <_svfiprintf_r+0x194>
 8005906:	ab03      	add	r3, sp, #12
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	462a      	mov	r2, r5
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <_svfiprintf_r+0x1f8>)
 800590e:	a904      	add	r1, sp, #16
 8005910:	4638      	mov	r0, r7
 8005912:	f3af 8000 	nop.w
 8005916:	1c42      	adds	r2, r0, #1
 8005918:	4606      	mov	r6, r0
 800591a:	d1d6      	bne.n	80058ca <_svfiprintf_r+0x176>
 800591c:	89ab      	ldrh	r3, [r5, #12]
 800591e:	065b      	lsls	r3, r3, #25
 8005920:	f53f af2c 	bmi.w	800577c <_svfiprintf_r+0x28>
 8005924:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005926:	b01d      	add	sp, #116	; 0x74
 8005928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592c:	ab03      	add	r3, sp, #12
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	462a      	mov	r2, r5
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <_svfiprintf_r+0x1f8>)
 8005934:	a904      	add	r1, sp, #16
 8005936:	4638      	mov	r0, r7
 8005938:	f000 f87a 	bl	8005a30 <_printf_i>
 800593c:	e7eb      	b.n	8005916 <_svfiprintf_r+0x1c2>
 800593e:	bf00      	nop
 8005940:	08005fe0 	.word	0x08005fe0
 8005944:	08005fea 	.word	0x08005fea
 8005948:	00000000 	.word	0x00000000
 800594c:	0800569d 	.word	0x0800569d
 8005950:	08005fe6 	.word	0x08005fe6

08005954 <_printf_common>:
 8005954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	4616      	mov	r6, r2
 800595a:	4699      	mov	r9, r3
 800595c:	688a      	ldr	r2, [r1, #8]
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005964:	4293      	cmp	r3, r2
 8005966:	bfb8      	it	lt
 8005968:	4613      	movlt	r3, r2
 800596a:	6033      	str	r3, [r6, #0]
 800596c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005970:	4607      	mov	r7, r0
 8005972:	460c      	mov	r4, r1
 8005974:	b10a      	cbz	r2, 800597a <_printf_common+0x26>
 8005976:	3301      	adds	r3, #1
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0699      	lsls	r1, r3, #26
 800597e:	bf42      	ittt	mi
 8005980:	6833      	ldrmi	r3, [r6, #0]
 8005982:	3302      	addmi	r3, #2
 8005984:	6033      	strmi	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d106      	bne.n	800599c <_printf_common+0x48>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	6832      	ldr	r2, [r6, #0]
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	42ab      	cmp	r3, r5
 800599a:	dc26      	bgt.n	80059ea <_printf_common+0x96>
 800599c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059a0:	1e13      	subs	r3, r2, #0
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	0692      	lsls	r2, r2, #26
 80059aa:	d42b      	bmi.n	8005a04 <_printf_common+0xb0>
 80059ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b0:	4649      	mov	r1, r9
 80059b2:	4638      	mov	r0, r7
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d01e      	beq.n	80059f8 <_printf_common+0xa4>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	68e5      	ldr	r5, [r4, #12]
 80059be:	6832      	ldr	r2, [r6, #0]
 80059c0:	f003 0306 	and.w	r3, r3, #6
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	bf08      	it	eq
 80059c8:	1aad      	subeq	r5, r5, r2
 80059ca:	68a3      	ldr	r3, [r4, #8]
 80059cc:	6922      	ldr	r2, [r4, #16]
 80059ce:	bf0c      	ite	eq
 80059d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d4:	2500      	movne	r5, #0
 80059d6:	4293      	cmp	r3, r2
 80059d8:	bfc4      	itt	gt
 80059da:	1a9b      	subgt	r3, r3, r2
 80059dc:	18ed      	addgt	r5, r5, r3
 80059de:	2600      	movs	r6, #0
 80059e0:	341a      	adds	r4, #26
 80059e2:	42b5      	cmp	r5, r6
 80059e4:	d11a      	bne.n	8005a1c <_printf_common+0xc8>
 80059e6:	2000      	movs	r0, #0
 80059e8:	e008      	b.n	80059fc <_printf_common+0xa8>
 80059ea:	2301      	movs	r3, #1
 80059ec:	4652      	mov	r2, sl
 80059ee:	4649      	mov	r1, r9
 80059f0:	4638      	mov	r0, r7
 80059f2:	47c0      	blx	r8
 80059f4:	3001      	adds	r0, #1
 80059f6:	d103      	bne.n	8005a00 <_printf_common+0xac>
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a00:	3501      	adds	r5, #1
 8005a02:	e7c6      	b.n	8005992 <_printf_common+0x3e>
 8005a04:	18e1      	adds	r1, r4, r3
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	2030      	movs	r0, #48	; 0x30
 8005a0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a0e:	4422      	add	r2, r4
 8005a10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a18:	3302      	adds	r3, #2
 8005a1a:	e7c7      	b.n	80059ac <_printf_common+0x58>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	4622      	mov	r2, r4
 8005a20:	4649      	mov	r1, r9
 8005a22:	4638      	mov	r0, r7
 8005a24:	47c0      	blx	r8
 8005a26:	3001      	adds	r0, #1
 8005a28:	d0e6      	beq.n	80059f8 <_printf_common+0xa4>
 8005a2a:	3601      	adds	r6, #1
 8005a2c:	e7d9      	b.n	80059e2 <_printf_common+0x8e>
	...

08005a30 <_printf_i>:
 8005a30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	7e0f      	ldrb	r7, [r1, #24]
 8005a36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a38:	2f78      	cmp	r7, #120	; 0x78
 8005a3a:	4691      	mov	r9, r2
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	469a      	mov	sl, r3
 8005a42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a46:	d807      	bhi.n	8005a58 <_printf_i+0x28>
 8005a48:	2f62      	cmp	r7, #98	; 0x62
 8005a4a:	d80a      	bhi.n	8005a62 <_printf_i+0x32>
 8005a4c:	2f00      	cmp	r7, #0
 8005a4e:	f000 80d8 	beq.w	8005c02 <_printf_i+0x1d2>
 8005a52:	2f58      	cmp	r7, #88	; 0x58
 8005a54:	f000 80a3 	beq.w	8005b9e <_printf_i+0x16e>
 8005a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a60:	e03a      	b.n	8005ad8 <_printf_i+0xa8>
 8005a62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a66:	2b15      	cmp	r3, #21
 8005a68:	d8f6      	bhi.n	8005a58 <_printf_i+0x28>
 8005a6a:	a101      	add	r1, pc, #4	; (adr r1, 8005a70 <_printf_i+0x40>)
 8005a6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a70:	08005ac9 	.word	0x08005ac9
 8005a74:	08005add 	.word	0x08005add
 8005a78:	08005a59 	.word	0x08005a59
 8005a7c:	08005a59 	.word	0x08005a59
 8005a80:	08005a59 	.word	0x08005a59
 8005a84:	08005a59 	.word	0x08005a59
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005a59 	.word	0x08005a59
 8005a90:	08005a59 	.word	0x08005a59
 8005a94:	08005a59 	.word	0x08005a59
 8005a98:	08005a59 	.word	0x08005a59
 8005a9c:	08005be9 	.word	0x08005be9
 8005aa0:	08005b0d 	.word	0x08005b0d
 8005aa4:	08005bcb 	.word	0x08005bcb
 8005aa8:	08005a59 	.word	0x08005a59
 8005aac:	08005a59 	.word	0x08005a59
 8005ab0:	08005c0b 	.word	0x08005c0b
 8005ab4:	08005a59 	.word	0x08005a59
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005a59 	.word	0x08005a59
 8005ac0:	08005a59 	.word	0x08005a59
 8005ac4:	08005bd3 	.word	0x08005bd3
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	1d1a      	adds	r2, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	602a      	str	r2, [r5, #0]
 8005ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0a3      	b.n	8005c24 <_printf_i+0x1f4>
 8005adc:	6820      	ldr	r0, [r4, #0]
 8005ade:	6829      	ldr	r1, [r5, #0]
 8005ae0:	0606      	lsls	r6, r0, #24
 8005ae2:	f101 0304 	add.w	r3, r1, #4
 8005ae6:	d50a      	bpl.n	8005afe <_printf_i+0xce>
 8005ae8:	680e      	ldr	r6, [r1, #0]
 8005aea:	602b      	str	r3, [r5, #0]
 8005aec:	2e00      	cmp	r6, #0
 8005aee:	da03      	bge.n	8005af8 <_printf_i+0xc8>
 8005af0:	232d      	movs	r3, #45	; 0x2d
 8005af2:	4276      	negs	r6, r6
 8005af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005af8:	485e      	ldr	r0, [pc, #376]	; (8005c74 <_printf_i+0x244>)
 8005afa:	230a      	movs	r3, #10
 8005afc:	e019      	b.n	8005b32 <_printf_i+0x102>
 8005afe:	680e      	ldr	r6, [r1, #0]
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b06:	bf18      	it	ne
 8005b08:	b236      	sxthne	r6, r6
 8005b0a:	e7ef      	b.n	8005aec <_printf_i+0xbc>
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	6820      	ldr	r0, [r4, #0]
 8005b10:	1d19      	adds	r1, r3, #4
 8005b12:	6029      	str	r1, [r5, #0]
 8005b14:	0601      	lsls	r1, r0, #24
 8005b16:	d501      	bpl.n	8005b1c <_printf_i+0xec>
 8005b18:	681e      	ldr	r6, [r3, #0]
 8005b1a:	e002      	b.n	8005b22 <_printf_i+0xf2>
 8005b1c:	0646      	lsls	r6, r0, #25
 8005b1e:	d5fb      	bpl.n	8005b18 <_printf_i+0xe8>
 8005b20:	881e      	ldrh	r6, [r3, #0]
 8005b22:	4854      	ldr	r0, [pc, #336]	; (8005c74 <_printf_i+0x244>)
 8005b24:	2f6f      	cmp	r7, #111	; 0x6f
 8005b26:	bf0c      	ite	eq
 8005b28:	2308      	moveq	r3, #8
 8005b2a:	230a      	movne	r3, #10
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b32:	6865      	ldr	r5, [r4, #4]
 8005b34:	60a5      	str	r5, [r4, #8]
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	bfa2      	ittt	ge
 8005b3a:	6821      	ldrge	r1, [r4, #0]
 8005b3c:	f021 0104 	bicge.w	r1, r1, #4
 8005b40:	6021      	strge	r1, [r4, #0]
 8005b42:	b90e      	cbnz	r6, 8005b48 <_printf_i+0x118>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	d04d      	beq.n	8005be4 <_printf_i+0x1b4>
 8005b48:	4615      	mov	r5, r2
 8005b4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b4e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b52:	5dc7      	ldrb	r7, [r0, r7]
 8005b54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b58:	4637      	mov	r7, r6
 8005b5a:	42bb      	cmp	r3, r7
 8005b5c:	460e      	mov	r6, r1
 8005b5e:	d9f4      	bls.n	8005b4a <_printf_i+0x11a>
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d10b      	bne.n	8005b7c <_printf_i+0x14c>
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	07de      	lsls	r6, r3, #31
 8005b68:	d508      	bpl.n	8005b7c <_printf_i+0x14c>
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	6861      	ldr	r1, [r4, #4]
 8005b6e:	4299      	cmp	r1, r3
 8005b70:	bfde      	ittt	le
 8005b72:	2330      	movle	r3, #48	; 0x30
 8005b74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b7c:	1b52      	subs	r2, r2, r5
 8005b7e:	6122      	str	r2, [r4, #16]
 8005b80:	f8cd a000 	str.w	sl, [sp]
 8005b84:	464b      	mov	r3, r9
 8005b86:	aa03      	add	r2, sp, #12
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f7ff fee2 	bl	8005954 <_printf_common>
 8005b90:	3001      	adds	r0, #1
 8005b92:	d14c      	bne.n	8005c2e <_printf_i+0x1fe>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	b004      	add	sp, #16
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	4835      	ldr	r0, [pc, #212]	; (8005c74 <_printf_i+0x244>)
 8005ba0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005ba4:	6829      	ldr	r1, [r5, #0]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bac:	6029      	str	r1, [r5, #0]
 8005bae:	061d      	lsls	r5, r3, #24
 8005bb0:	d514      	bpl.n	8005bdc <_printf_i+0x1ac>
 8005bb2:	07df      	lsls	r7, r3, #31
 8005bb4:	bf44      	itt	mi
 8005bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bba:	6023      	strmi	r3, [r4, #0]
 8005bbc:	b91e      	cbnz	r6, 8005bc6 <_printf_i+0x196>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f023 0320 	bic.w	r3, r3, #32
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	2310      	movs	r3, #16
 8005bc8:	e7b0      	b.n	8005b2c <_printf_i+0xfc>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	f043 0320 	orr.w	r3, r3, #32
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	2378      	movs	r3, #120	; 0x78
 8005bd4:	4828      	ldr	r0, [pc, #160]	; (8005c78 <_printf_i+0x248>)
 8005bd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bda:	e7e3      	b.n	8005ba4 <_printf_i+0x174>
 8005bdc:	0659      	lsls	r1, r3, #25
 8005bde:	bf48      	it	mi
 8005be0:	b2b6      	uxthmi	r6, r6
 8005be2:	e7e6      	b.n	8005bb2 <_printf_i+0x182>
 8005be4:	4615      	mov	r5, r2
 8005be6:	e7bb      	b.n	8005b60 <_printf_i+0x130>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	6826      	ldr	r6, [r4, #0]
 8005bec:	6961      	ldr	r1, [r4, #20]
 8005bee:	1d18      	adds	r0, r3, #4
 8005bf0:	6028      	str	r0, [r5, #0]
 8005bf2:	0635      	lsls	r5, r6, #24
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	d501      	bpl.n	8005bfc <_printf_i+0x1cc>
 8005bf8:	6019      	str	r1, [r3, #0]
 8005bfa:	e002      	b.n	8005c02 <_printf_i+0x1d2>
 8005bfc:	0670      	lsls	r0, r6, #25
 8005bfe:	d5fb      	bpl.n	8005bf8 <_printf_i+0x1c8>
 8005c00:	8019      	strh	r1, [r3, #0]
 8005c02:	2300      	movs	r3, #0
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	4615      	mov	r5, r2
 8005c08:	e7ba      	b.n	8005b80 <_printf_i+0x150>
 8005c0a:	682b      	ldr	r3, [r5, #0]
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	602a      	str	r2, [r5, #0]
 8005c10:	681d      	ldr	r5, [r3, #0]
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4628      	mov	r0, r5
 8005c18:	f7fa faea 	bl	80001f0 <memchr>
 8005c1c:	b108      	cbz	r0, 8005c22 <_printf_i+0x1f2>
 8005c1e:	1b40      	subs	r0, r0, r5
 8005c20:	6060      	str	r0, [r4, #4]
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	2300      	movs	r3, #0
 8005c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c2c:	e7a8      	b.n	8005b80 <_printf_i+0x150>
 8005c2e:	6923      	ldr	r3, [r4, #16]
 8005c30:	462a      	mov	r2, r5
 8005c32:	4649      	mov	r1, r9
 8005c34:	4640      	mov	r0, r8
 8005c36:	47d0      	blx	sl
 8005c38:	3001      	adds	r0, #1
 8005c3a:	d0ab      	beq.n	8005b94 <_printf_i+0x164>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	079b      	lsls	r3, r3, #30
 8005c40:	d413      	bmi.n	8005c6a <_printf_i+0x23a>
 8005c42:	68e0      	ldr	r0, [r4, #12]
 8005c44:	9b03      	ldr	r3, [sp, #12]
 8005c46:	4298      	cmp	r0, r3
 8005c48:	bfb8      	it	lt
 8005c4a:	4618      	movlt	r0, r3
 8005c4c:	e7a4      	b.n	8005b98 <_printf_i+0x168>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4632      	mov	r2, r6
 8005c52:	4649      	mov	r1, r9
 8005c54:	4640      	mov	r0, r8
 8005c56:	47d0      	blx	sl
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d09b      	beq.n	8005b94 <_printf_i+0x164>
 8005c5c:	3501      	adds	r5, #1
 8005c5e:	68e3      	ldr	r3, [r4, #12]
 8005c60:	9903      	ldr	r1, [sp, #12]
 8005c62:	1a5b      	subs	r3, r3, r1
 8005c64:	42ab      	cmp	r3, r5
 8005c66:	dcf2      	bgt.n	8005c4e <_printf_i+0x21e>
 8005c68:	e7eb      	b.n	8005c42 <_printf_i+0x212>
 8005c6a:	2500      	movs	r5, #0
 8005c6c:	f104 0619 	add.w	r6, r4, #25
 8005c70:	e7f5      	b.n	8005c5e <_printf_i+0x22e>
 8005c72:	bf00      	nop
 8005c74:	08005ff1 	.word	0x08005ff1
 8005c78:	08006002 	.word	0x08006002

08005c7c <memmove>:
 8005c7c:	4288      	cmp	r0, r1
 8005c7e:	b510      	push	{r4, lr}
 8005c80:	eb01 0402 	add.w	r4, r1, r2
 8005c84:	d902      	bls.n	8005c8c <memmove+0x10>
 8005c86:	4284      	cmp	r4, r0
 8005c88:	4623      	mov	r3, r4
 8005c8a:	d807      	bhi.n	8005c9c <memmove+0x20>
 8005c8c:	1e43      	subs	r3, r0, #1
 8005c8e:	42a1      	cmp	r1, r4
 8005c90:	d008      	beq.n	8005ca4 <memmove+0x28>
 8005c92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c9a:	e7f8      	b.n	8005c8e <memmove+0x12>
 8005c9c:	4402      	add	r2, r0
 8005c9e:	4601      	mov	r1, r0
 8005ca0:	428a      	cmp	r2, r1
 8005ca2:	d100      	bne.n	8005ca6 <memmove+0x2a>
 8005ca4:	bd10      	pop	{r4, pc}
 8005ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005caa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cae:	e7f7      	b.n	8005ca0 <memmove+0x24>

08005cb0 <_free_r>:
 8005cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cb2:	2900      	cmp	r1, #0
 8005cb4:	d044      	beq.n	8005d40 <_free_r+0x90>
 8005cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cba:	9001      	str	r0, [sp, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8005cc2:	bfb8      	it	lt
 8005cc4:	18e4      	addlt	r4, r4, r3
 8005cc6:	f000 f913 	bl	8005ef0 <__malloc_lock>
 8005cca:	4a1e      	ldr	r2, [pc, #120]	; (8005d44 <_free_r+0x94>)
 8005ccc:	9801      	ldr	r0, [sp, #4]
 8005cce:	6813      	ldr	r3, [r2, #0]
 8005cd0:	b933      	cbnz	r3, 8005ce0 <_free_r+0x30>
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	6014      	str	r4, [r2, #0]
 8005cd6:	b003      	add	sp, #12
 8005cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cdc:	f000 b90e 	b.w	8005efc <__malloc_unlock>
 8005ce0:	42a3      	cmp	r3, r4
 8005ce2:	d908      	bls.n	8005cf6 <_free_r+0x46>
 8005ce4:	6825      	ldr	r5, [r4, #0]
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1949      	addeq	r1, r1, r5
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	e7ed      	b.n	8005cd2 <_free_r+0x22>
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	b10b      	cbz	r3, 8005d00 <_free_r+0x50>
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d9fa      	bls.n	8005cf6 <_free_r+0x46>
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	1855      	adds	r5, r2, r1
 8005d04:	42a5      	cmp	r5, r4
 8005d06:	d10b      	bne.n	8005d20 <_free_r+0x70>
 8005d08:	6824      	ldr	r4, [r4, #0]
 8005d0a:	4421      	add	r1, r4
 8005d0c:	1854      	adds	r4, r2, r1
 8005d0e:	42a3      	cmp	r3, r4
 8005d10:	6011      	str	r1, [r2, #0]
 8005d12:	d1e0      	bne.n	8005cd6 <_free_r+0x26>
 8005d14:	681c      	ldr	r4, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6053      	str	r3, [r2, #4]
 8005d1a:	4421      	add	r1, r4
 8005d1c:	6011      	str	r1, [r2, #0]
 8005d1e:	e7da      	b.n	8005cd6 <_free_r+0x26>
 8005d20:	d902      	bls.n	8005d28 <_free_r+0x78>
 8005d22:	230c      	movs	r3, #12
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	e7d6      	b.n	8005cd6 <_free_r+0x26>
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1961      	adds	r1, r4, r5
 8005d2c:	428b      	cmp	r3, r1
 8005d2e:	bf04      	itt	eq
 8005d30:	6819      	ldreq	r1, [r3, #0]
 8005d32:	685b      	ldreq	r3, [r3, #4]
 8005d34:	6063      	str	r3, [r4, #4]
 8005d36:	bf04      	itt	eq
 8005d38:	1949      	addeq	r1, r1, r5
 8005d3a:	6021      	streq	r1, [r4, #0]
 8005d3c:	6054      	str	r4, [r2, #4]
 8005d3e:	e7ca      	b.n	8005cd6 <_free_r+0x26>
 8005d40:	b003      	add	sp, #12
 8005d42:	bd30      	pop	{r4, r5, pc}
 8005d44:	200041d0 	.word	0x200041d0

08005d48 <sbrk_aligned>:
 8005d48:	b570      	push	{r4, r5, r6, lr}
 8005d4a:	4e0e      	ldr	r6, [pc, #56]	; (8005d84 <sbrk_aligned+0x3c>)
 8005d4c:	460c      	mov	r4, r1
 8005d4e:	6831      	ldr	r1, [r6, #0]
 8005d50:	4605      	mov	r5, r0
 8005d52:	b911      	cbnz	r1, 8005d5a <sbrk_aligned+0x12>
 8005d54:	f000 f8bc 	bl	8005ed0 <_sbrk_r>
 8005d58:	6030      	str	r0, [r6, #0]
 8005d5a:	4621      	mov	r1, r4
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 f8b7 	bl	8005ed0 <_sbrk_r>
 8005d62:	1c43      	adds	r3, r0, #1
 8005d64:	d00a      	beq.n	8005d7c <sbrk_aligned+0x34>
 8005d66:	1cc4      	adds	r4, r0, #3
 8005d68:	f024 0403 	bic.w	r4, r4, #3
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d007      	beq.n	8005d80 <sbrk_aligned+0x38>
 8005d70:	1a21      	subs	r1, r4, r0
 8005d72:	4628      	mov	r0, r5
 8005d74:	f000 f8ac 	bl	8005ed0 <_sbrk_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d101      	bne.n	8005d80 <sbrk_aligned+0x38>
 8005d7c:	f04f 34ff 	mov.w	r4, #4294967295
 8005d80:	4620      	mov	r0, r4
 8005d82:	bd70      	pop	{r4, r5, r6, pc}
 8005d84:	200041d4 	.word	0x200041d4

08005d88 <_malloc_r>:
 8005d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d8c:	1ccd      	adds	r5, r1, #3
 8005d8e:	f025 0503 	bic.w	r5, r5, #3
 8005d92:	3508      	adds	r5, #8
 8005d94:	2d0c      	cmp	r5, #12
 8005d96:	bf38      	it	cc
 8005d98:	250c      	movcc	r5, #12
 8005d9a:	2d00      	cmp	r5, #0
 8005d9c:	4607      	mov	r7, r0
 8005d9e:	db01      	blt.n	8005da4 <_malloc_r+0x1c>
 8005da0:	42a9      	cmp	r1, r5
 8005da2:	d905      	bls.n	8005db0 <_malloc_r+0x28>
 8005da4:	230c      	movs	r3, #12
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	2600      	movs	r6, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	4e2e      	ldr	r6, [pc, #184]	; (8005e6c <_malloc_r+0xe4>)
 8005db2:	f000 f89d 	bl	8005ef0 <__malloc_lock>
 8005db6:	6833      	ldr	r3, [r6, #0]
 8005db8:	461c      	mov	r4, r3
 8005dba:	bb34      	cbnz	r4, 8005e0a <_malloc_r+0x82>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	f7ff ffc2 	bl	8005d48 <sbrk_aligned>
 8005dc4:	1c43      	adds	r3, r0, #1
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	d14d      	bne.n	8005e66 <_malloc_r+0xde>
 8005dca:	6834      	ldr	r4, [r6, #0]
 8005dcc:	4626      	mov	r6, r4
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d140      	bne.n	8005e54 <_malloc_r+0xcc>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	eb04 0803 	add.w	r8, r4, r3
 8005ddc:	f000 f878 	bl	8005ed0 <_sbrk_r>
 8005de0:	4580      	cmp	r8, r0
 8005de2:	d13a      	bne.n	8005e5a <_malloc_r+0xd2>
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	3503      	adds	r5, #3
 8005de8:	1a6d      	subs	r5, r5, r1
 8005dea:	f025 0503 	bic.w	r5, r5, #3
 8005dee:	3508      	adds	r5, #8
 8005df0:	2d0c      	cmp	r5, #12
 8005df2:	bf38      	it	cc
 8005df4:	250c      	movcc	r5, #12
 8005df6:	4629      	mov	r1, r5
 8005df8:	4638      	mov	r0, r7
 8005dfa:	f7ff ffa5 	bl	8005d48 <sbrk_aligned>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d02b      	beq.n	8005e5a <_malloc_r+0xd2>
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	442b      	add	r3, r5
 8005e06:	6023      	str	r3, [r4, #0]
 8005e08:	e00e      	b.n	8005e28 <_malloc_r+0xa0>
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	1b52      	subs	r2, r2, r5
 8005e0e:	d41e      	bmi.n	8005e4e <_malloc_r+0xc6>
 8005e10:	2a0b      	cmp	r2, #11
 8005e12:	d916      	bls.n	8005e42 <_malloc_r+0xba>
 8005e14:	1961      	adds	r1, r4, r5
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	6025      	str	r5, [r4, #0]
 8005e1a:	bf18      	it	ne
 8005e1c:	6059      	strne	r1, [r3, #4]
 8005e1e:	6863      	ldr	r3, [r4, #4]
 8005e20:	bf08      	it	eq
 8005e22:	6031      	streq	r1, [r6, #0]
 8005e24:	5162      	str	r2, [r4, r5]
 8005e26:	604b      	str	r3, [r1, #4]
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f104 060b 	add.w	r6, r4, #11
 8005e2e:	f000 f865 	bl	8005efc <__malloc_unlock>
 8005e32:	f026 0607 	bic.w	r6, r6, #7
 8005e36:	1d23      	adds	r3, r4, #4
 8005e38:	1af2      	subs	r2, r6, r3
 8005e3a:	d0b6      	beq.n	8005daa <_malloc_r+0x22>
 8005e3c:	1b9b      	subs	r3, r3, r6
 8005e3e:	50a3      	str	r3, [r4, r2]
 8005e40:	e7b3      	b.n	8005daa <_malloc_r+0x22>
 8005e42:	6862      	ldr	r2, [r4, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	bf0c      	ite	eq
 8005e48:	6032      	streq	r2, [r6, #0]
 8005e4a:	605a      	strne	r2, [r3, #4]
 8005e4c:	e7ec      	b.n	8005e28 <_malloc_r+0xa0>
 8005e4e:	4623      	mov	r3, r4
 8005e50:	6864      	ldr	r4, [r4, #4]
 8005e52:	e7b2      	b.n	8005dba <_malloc_r+0x32>
 8005e54:	4634      	mov	r4, r6
 8005e56:	6876      	ldr	r6, [r6, #4]
 8005e58:	e7b9      	b.n	8005dce <_malloc_r+0x46>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	603b      	str	r3, [r7, #0]
 8005e5e:	4638      	mov	r0, r7
 8005e60:	f000 f84c 	bl	8005efc <__malloc_unlock>
 8005e64:	e7a1      	b.n	8005daa <_malloc_r+0x22>
 8005e66:	6025      	str	r5, [r4, #0]
 8005e68:	e7de      	b.n	8005e28 <_malloc_r+0xa0>
 8005e6a:	bf00      	nop
 8005e6c:	200041d0 	.word	0x200041d0

08005e70 <_realloc_r>:
 8005e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e74:	4680      	mov	r8, r0
 8005e76:	4614      	mov	r4, r2
 8005e78:	460e      	mov	r6, r1
 8005e7a:	b921      	cbnz	r1, 8005e86 <_realloc_r+0x16>
 8005e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e80:	4611      	mov	r1, r2
 8005e82:	f7ff bf81 	b.w	8005d88 <_malloc_r>
 8005e86:	b92a      	cbnz	r2, 8005e94 <_realloc_r+0x24>
 8005e88:	f7ff ff12 	bl	8005cb0 <_free_r>
 8005e8c:	4625      	mov	r5, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e94:	f000 f838 	bl	8005f08 <_malloc_usable_size_r>
 8005e98:	4284      	cmp	r4, r0
 8005e9a:	4607      	mov	r7, r0
 8005e9c:	d802      	bhi.n	8005ea4 <_realloc_r+0x34>
 8005e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ea2:	d812      	bhi.n	8005eca <_realloc_r+0x5a>
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	f7ff ff6e 	bl	8005d88 <_malloc_r>
 8005eac:	4605      	mov	r5, r0
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d0ed      	beq.n	8005e8e <_realloc_r+0x1e>
 8005eb2:	42bc      	cmp	r4, r7
 8005eb4:	4622      	mov	r2, r4
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	bf28      	it	cs
 8005eba:	463a      	movcs	r2, r7
 8005ebc:	f7ff fbb8 	bl	8005630 <memcpy>
 8005ec0:	4631      	mov	r1, r6
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	f7ff fef4 	bl	8005cb0 <_free_r>
 8005ec8:	e7e1      	b.n	8005e8e <_realloc_r+0x1e>
 8005eca:	4635      	mov	r5, r6
 8005ecc:	e7df      	b.n	8005e8e <_realloc_r+0x1e>
	...

08005ed0 <_sbrk_r>:
 8005ed0:	b538      	push	{r3, r4, r5, lr}
 8005ed2:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_sbrk_r+0x1c>)
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	4608      	mov	r0, r1
 8005eda:	602b      	str	r3, [r5, #0]
 8005edc:	f7fb fb42 	bl	8001564 <_sbrk>
 8005ee0:	1c43      	adds	r3, r0, #1
 8005ee2:	d102      	bne.n	8005eea <_sbrk_r+0x1a>
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	b103      	cbz	r3, 8005eea <_sbrk_r+0x1a>
 8005ee8:	6023      	str	r3, [r4, #0]
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
 8005eec:	200041d8 	.word	0x200041d8

08005ef0 <__malloc_lock>:
 8005ef0:	4801      	ldr	r0, [pc, #4]	; (8005ef8 <__malloc_lock+0x8>)
 8005ef2:	f000 b811 	b.w	8005f18 <__retarget_lock_acquire_recursive>
 8005ef6:	bf00      	nop
 8005ef8:	200041dc 	.word	0x200041dc

08005efc <__malloc_unlock>:
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <__malloc_unlock+0x8>)
 8005efe:	f000 b80c 	b.w	8005f1a <__retarget_lock_release_recursive>
 8005f02:	bf00      	nop
 8005f04:	200041dc 	.word	0x200041dc

08005f08 <_malloc_usable_size_r>:
 8005f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0c:	1f18      	subs	r0, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfbc      	itt	lt
 8005f12:	580b      	ldrlt	r3, [r1, r0]
 8005f14:	18c0      	addlt	r0, r0, r3
 8005f16:	4770      	bx	lr

08005f18 <__retarget_lock_acquire_recursive>:
 8005f18:	4770      	bx	lr

08005f1a <__retarget_lock_release_recursive>:
 8005f1a:	4770      	bx	lr

08005f1c <_init>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr

08005f28 <_fini>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr
